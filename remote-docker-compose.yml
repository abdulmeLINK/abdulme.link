version: '3.8'

services:
  # This service clones the repo into a named volume so that the code is available
  git-sync:
    image: alpine
    volumes:
      - codebase:/work
    working_dir: /work
    command: |
      /bin/sh -c '
      echo "Starting git-sync setup..." &&
      apk update &&
      apk add --no-cache git shadow curl &&
      if ! getent group www > /dev/null 2>&1; then
        addgroup -g 1000 www;
      fi &&
      if ! getent passwd www > /dev/null 2>&1; then
        adduser -u 1000 -G www -H -D www;
      fi &&
      cd /work &&
      git config --global --add safe.directory /work &&
      echo "Checking network connectivity..." &&
      for i in {1..5}; do
        if ping -c 1 github.com > /dev/null 2>&1; then
          echo "Network connectivity established";
          break;
        else
          echo "Waiting for network... attempt $i";
          [ $i -eq 5 ] && echo "Network connection failed" && exit 1;
          sleep 5;
        fi;
      done &&
      while true; do
        if [ -d .git ]; then
          echo "Pulling latest changes..." &&
          git fetch origin local-db &&
          git reset --hard origin/local-db || echo "Git pull failed, will retry next cycle";
        else
          echo "Cloning repository..." &&
          rm -rf * .[^.]* ..?* &&
          for i in {1..3}; do
            git clone --depth 1 --branch local-db https://github.com/abdulmeLINK/abdulme.link.git . && break || 
            echo "Clone failed, retrying in 5 seconds... ($i/3)" && 
            sleep 5;
          done;
        fi;
        mkdir -p storage/logs storage/framework/sessions storage/framework/views storage/framework/cache bootstrap/cache &&
        touch .env.example &&
        if [ ! -f artisan ]; then
          printf "#!/usr/bin/env php\n<?php\ndefine(\"LARAVEL_START\", microtime(true));\nrequire __DIR__.\"/vendor/autoload.php\";\n\$app = require_once __DIR__.\"/bootstrap/app.php\";\n\$kernel = \$app->make(\"Illuminate\\\\Contracts\\\\Console\\\\Kernel\");\n\$status = \$kernel->handle(\n    \$input = new \"Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput\",\n    new \"Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput\"\n);\n\$kernel->terminate(\$input, \$status);\nexit(\$status);" > artisan;
        fi &&
        if [ ! -f composer.json ]; then
          printf "{\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"laravel/framework\": \"^10.0\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"stable\",\n    \"prefer-stable\": true\n}" > composer.json;
        fi &&
        chown -R www:www /work &&
        chmod -R 775 /work &&
        chmod -R 775 storage bootstrap/cache &&
        chmod 666 .env.example &&
        chmod +x artisan &&
        echo "Setup complete, sleeping..." &&
        sleep 60;
      done'
    healthcheck:
      test: ["CMD-SHELL", "test -f /work/.git/HEAD && test -d /work/storage && test -x /work/artisan"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile.dockerfile
    image: me:latest
    container_name: me
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      COMPOSER_PROCESS_TIMEOUT: 2000
    working_dir: /var/www
    volumes:
      - codebase:/var/www
      - vendor:/var/www/vendor
      - ~/.composer/auth.json:/home/www/.composer/auth.json:ro
    user: "www:www"
    command: sh -c "cd /var/www && \
      mkdir -p storage/logs storage/framework/sessions storage/framework/views storage/framework/cache bootstrap/cache && \
      if [ ! -f .env ] || [ ! -s .env ]; then \
        cp .env.example .env || printf 'APP_NAME=Laravel\nAPP_ENV=local\nAPP_DEBUG=true\nAPP_URL=http://localhost\nCIPHER=aes-256-cbc\n' > .env; \
      fi && \
      sed -i 's/^APP_KEY=.*$/APP_KEY=/' .env && \
      echo 'CIPHER=aes-256-cbc' >> .env && \
      php artisan key:generate --force && \
      echo 'APP_DEBUG=true' >> .env && \
      echo 'APP_ID=EXAMPLE_APP_ID' >> .env && \
      php artisan config:clear && \
      php artisan cache:clear && \
      for i in {1..5}; do \
        echo 'Attempting composer install (attempt '$$i')...' && \
        composer install --no-interaction --prefer-dist --no-progress --optimize-autoloader && break || \
        echo 'Composer install failed, retrying in 10 seconds...' && \
        sleep 10; \
      done && \
      chmod -R 777 storage bootstrap/cache && \
      php artisan optimize:clear && \
      php artisan view:clear && \
      php-fpm"
    depends_on:
      git-sync:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php -v"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx-service
    restart: unless-stopped
    tty: true
    ports:
      - "8080:80"
    volumes:
      - codebase:/var/www
      - ./nginx.conf:/etc/nginx/conf.d/default.conf.template
    entrypoint: sh -c "if [ -f /var/www/nginx.conf ]; then cp /var/www/nginx.conf /etc/nginx/conf.d/default.conf; elif [ -f /etc/nginx/conf.d/default.conf.template ]; then cp /etc/nginx/conf.d/default.conf.template /etc/nginx/conf.d/default.conf; else echo 'server { listen 80; server_name localhost; root /var/www/public; index index.php; location / { try_files \$$uri \$$uri/ /index.php?\$$query_string; } location ~ \.php$ { fastcgi_pass app:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$$document_root\$$fastcgi_script_name; include fastcgi_params; } }' > /etc/nginx/conf.d/default.conf; fi && nginx -g 'daemon off;'"
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  mix:
    image: node:18
    working_dir: /app
    user: "node:node"
    entrypoint: sh -c "
      if [ ! -f package.json ]; then
        echo 'Waiting for package.json to be available...' && 
        until [ -f package.json ]; do
          sleep 5;
        done;
      fi &&
      echo 'Installing npm dependencies...' &&
      npm ci --quiet &&
      echo 'Building assets...' && 
      npm run build || npm run prod || npm run production || 
      (echo 'Production build failed, running in dev mode' && npm run dev -- --host --port=5174)"
    restart: unless-stopped
    volumes:
      - codebase:/app
    depends_on:
      git-sync:
        condition: service_healthy
    networks:
      - app-network

volumes:
  codebase:
  vendor:

networks:
  app-network:
    driver: bridge
