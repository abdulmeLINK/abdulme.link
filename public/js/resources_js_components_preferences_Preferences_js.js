"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_components_preferences_Preferences_js"],{

/***/ 154:
/*!************************************************************!*\
  !*** ./resources/js/components/preferences/Preferences.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Preferences)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 3453);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 4467);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 467);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 3029);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ 2901);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/regenerator */ 4756);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../EventBus.js */ 947);\n/* harmony import */ var _terminal_themes_TerminalThemes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../terminal/themes/TerminalThemes.js */ 59);\n/* harmony import */ var _config_ColorConstants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../config/ColorConstants.js */ 4923);\n\n\n\n\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n/**\r\n * Preferences Component - System Settings Manager\r\n * Handles 6 categories: Appearance, Desktop, Dock, Terminal, Performance, Privacy\r\n * Features: Live preview, instant application, localStorage persistence\r\n * @module Preferences\r\n */\n\n\n\n\nvar Preferences = /*#__PURE__*/function () {\n  function Preferences() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Preferences);\n    this.currentTab = 'appearance';\n    this.preferences = null;\n    this.unsavedChanges = false;\n    this.previewTimeout = null;\n    this.tabs = [{\n      id: 'appearance',\n      name: 'Appearance',\n      icon: '🎨'\n    }, {\n      id: 'desktop',\n      name: 'Desktop',\n      icon: '🖥️'\n    }, {\n      id: 'dock',\n      name: 'Dock',\n      icon: '📱'\n    }, {\n      id: 'terminal',\n      name: 'Terminal',\n      icon: '💻'\n    }, {\n      id: 'performance',\n      name: 'Performance',\n      icon: '⚡'\n    }, {\n      id: 'privacy',\n      name: 'Privacy',\n      icon: '🔒'\n    }];\n  }\n\n  /**\r\n   * Initialize preferences component\r\n   * @returns {Promise<HTMLElement>} The preferences container\r\n   */\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Preferences, [{\n    key: \"init\",\n    value: function () {\n      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().mark(function _callee() {\n        var container;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.loadPreferences();\n            case 3:\n              container = this.render();\n              this.attachEventListeners(container);\n              this.applyStoredPreferences();\n              return _context.abrupt(\"return\", container);\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Failed to initialize preferences:', _context.t0);\n              return _context.abrupt(\"return\", this.renderError());\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\r\n     * Load preferences from API and localStorage\r\n     */\n  }, {\n    key: \"loadPreferences\",\n    value: function () {\n      var _loadPreferences = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().mark(function _callee2() {\n        var stored, response, defaults;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              // Try localStorage first\n              stored = localStorage.getItem('userPreferences');\n              if (stored) {\n                this.preferences = JSON.parse(stored);\n              }\n\n              // Fetch from API for defaults/validation\n              _context2.next = 5;\n              return fetch('/api/preferences');\n            case 5:\n              response = _context2.sent;\n              if (!response.ok) {\n                _context2.next = 11;\n                break;\n              }\n              _context2.next = 9;\n              return response.json();\n            case 9:\n              defaults = _context2.sent;\n              // Merge with stored preferences\n              this.preferences = this.mergePreferences(defaults, this.preferences || {});\n            case 11:\n              _context2.next = 17;\n              break;\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Failed to load preferences:', _context2.t0);\n              this.preferences = this.getDefaultPreferences();\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 13]]);\n      }));\n      function loadPreferences() {\n        return _loadPreferences.apply(this, arguments);\n      }\n      return loadPreferences;\n    }()\n    /**\r\n     * Merge user preferences with defaults\r\n     */\n  }, {\n    key: \"mergePreferences\",\n    value: function mergePreferences(defaults, user) {\n      return _objectSpread(_objectSpread(_objectSpread({}, defaults), user), {}, {\n        appearance: _objectSpread(_objectSpread({}, defaults.appearance), user.appearance),\n        desktop: _objectSpread(_objectSpread({}, defaults.desktop), user.desktop),\n        dock: _objectSpread(_objectSpread({}, defaults.dock), user.dock),\n        terminal: _objectSpread(_objectSpread({}, defaults.terminal), user.terminal),\n        performance: _objectSpread(_objectSpread({}, defaults.performance), user.performance),\n        privacy: _objectSpread(_objectSpread({}, defaults.privacy), user.privacy)\n      });\n    }\n\n    /**\r\n     * Render preferences interface\r\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var container = document.createElement('div');\n      container.className = 'preferences-container';\n      container.innerHTML = \"\\n            <div class=\\\"preferences-sidebar\\\">\\n                \".concat(this.renderSidebar(), \"\\n            </div>\\n            <div class=\\\"preferences-content\\\">\\n                \").concat(this.renderContent(), \"\\n            </div>\\n        \");\n      return container;\n    }\n\n    /**\r\n     * Render sidebar with category tabs\r\n     */\n  }, {\n    key: \"renderSidebar\",\n    value: function renderSidebar() {\n      var _this = this;\n      return this.tabs.map(function (tab) {\n        return \"\\n            <button \\n                class=\\\"preferences-tab \".concat(tab.id === _this.currentTab ? 'active' : '', \"\\\"\\n                data-tab=\\\"\").concat(tab.id, \"\\\"\\n            >\\n                <span class=\\\"tab-icon\\\">\").concat(tab.icon, \"</span>\\n                <span class=\\\"tab-name\\\">\").concat(tab.name, \"</span>\\n            </button>\\n        \");\n      }).join('');\n    }\n\n    /**\r\n     * Render content area based on active tab\r\n     */\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      switch (this.currentTab) {\n        case 'appearance':\n          return this.renderAppearanceTab();\n        case 'desktop':\n          return this.renderDesktopTab();\n        case 'dock':\n          return this.renderDockTab();\n        case 'terminal':\n          return this.renderTerminalTab();\n        case 'performance':\n          return this.renderPerformanceTab();\n        case 'privacy':\n          return this.renderPrivacyTab();\n        default:\n          return '<div>Select a category</div>';\n      }\n    }\n\n    /**\r\n     * Render Appearance tab\r\n     */\n  }, {\n    key: \"renderAppearanceTab\",\n    value: function renderAppearanceTab() {\n      var _this$preferences;\n      var prefs = ((_this$preferences = this.preferences) === null || _this$preferences === void 0 ? void 0 : _this$preferences.appearance) || {};\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"appearance\\\">\\n                <h2>Appearance</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>Theme</label>\\n                    <div class=\\\"theme-selector\\\">\\n                        \".concat(this.renderThemeOptions(prefs.theme || 'auto'), \"\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Accent Color</label>\\n                    <input \\n                        type=\\\"color\\\" \\n                        class=\\\"color-picker\\\" \\n                        data-pref=\\\"appearance.accent_color\\\"\\n                        value=\\\"\").concat(prefs.accent_color || _config_ColorConstants_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].SYSTEM_BLUE, \"\\\"\\n                    />\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Transparency <span class=\\\"value-label\\\">\").concat(Math.round((prefs.transparency || 0.8) * 100), \"%</span></label>\\n                    <input \\n                        type=\\\"range\\\" \\n                        min=\\\"0\\\" \\n                        max=\\\"100\\\" \\n                        value=\\\"\").concat((prefs.transparency || 0.8) * 100, \"\\\"\\n                        class=\\\"slider\\\"\\n                        data-pref=\\\"appearance.transparency\\\"\\n                    />\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render Desktop tab\r\n     */\n  }, {\n    key: \"renderDesktopTab\",\n    value: function renderDesktopTab() {\n      var _this$preferences2;\n      var prefs = ((_this$preferences2 = this.preferences) === null || _this$preferences2 === void 0 ? void 0 : _this$preferences2.desktop) || {};\n      var wallpaper = prefs.wallpaper || {};\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"desktop\\\">\\n                <h2>Desktop & Wallpaper</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"desktop.wallpaper.auto_rotation\\\"\\n                            \".concat(wallpaper.auto_rotation ? 'checked' : '', \"\\n                        />\\n                        Auto-rotate wallpaper\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Rotation Interval</label>\\n                    <select data-pref=\\\"desktop.wallpaper.rotation_interval\\\">\\n                        <option value=\\\"900000\\\" \").concat(wallpaper.rotation_interval === 900000 ? 'selected' : '', \">15 minutes</option>\\n                        <option value=\\\"1800000\\\" \").concat(wallpaper.rotation_interval === 1800000 ? 'selected' : '', \">30 minutes</option>\\n                        <option value=\\\"3600000\\\" \").concat(wallpaper.rotation_interval === 3600000 ? 'selected' : '', \">1 hour</option>\\n                        <option value=\\\"21600000\\\" \").concat(wallpaper.rotation_interval === 21600000 ? 'selected' : '', \">6 hours</option>\\n                    </select>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"desktop.wallpaper.time_based_switching\\\"\\n                            \").concat(wallpaper.time_based_switching ? 'checked' : '', \"\\n                        />\\n                        Time-based light/dark switching\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group wallpaper-gallery-group\\\">\\n                    <label>Choose Wallpaper</label>\\n                    <div class=\\\"wallpaper-gallery-note\\\">Click to select your preferred wallpaper</div>\\n                    <div id=\\\"wallpaper-gallery-container\\\">\\n                        <div class=\\\"wallpaper-loading\\\">Loading wallpapers...</div>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Icon Size</label>\\n                    <div class=\\\"icon-size-preview\\\">\\n                        \").concat(['small', 'medium', 'large'].map(function (size) {\n        var _prefs$icons;\n        return \"\\n                            <button \\n                                class=\\\"icon-size-btn \".concat((((_prefs$icons = prefs.icons) === null || _prefs$icons === void 0 ? void 0 : _prefs$icons.size) || 'medium') === size ? 'active' : '', \"\\\"\\n                                data-pref=\\\"desktop.icons.size\\\"\\n                                data-value=\\\"\").concat(size, \"\\\"\\n                            >\\n                                \").concat(size.charAt(0).toUpperCase() + size.slice(1), \"\\n                            </button>\\n                        \");\n      }).join(''), \"\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render Dock tab\r\n     */\n  }, {\n    key: \"renderDockTab\",\n    value: function renderDockTab() {\n      var _this$preferences3, _prefs$magnification, _prefs$magnification2, _prefs$magnification3, _prefs$magnification4;\n      var prefs = ((_this$preferences3 = this.preferences) === null || _this$preferences3 === void 0 ? void 0 : _this$preferences3.dock) || {};\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"dock\\\">\\n                <h2>Dock Settings</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>Position</label>\\n                    <div class=\\\"dock-position-selector\\\">\\n                        \".concat(['bottom', 'left', 'right'].map(function (pos) {\n        return \"\\n                            <button \\n                                class=\\\"position-btn \".concat((prefs.position || 'bottom') === pos ? 'active' : '', \"\\\"\\n                                data-pref=\\\"dock.position\\\"\\n                                data-value=\\\"\").concat(pos, \"\\\"\\n                            >\\n                                \").concat(pos.charAt(0).toUpperCase() + pos.slice(1), \"\\n                            </button>\\n                        \");\n      }).join(''), \"\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Size <span class=\\\"value-label\\\">\").concat(prefs.size || 64, \"px</span></label>\\n                    <input \\n                        type=\\\"range\\\" \\n                        min=\\\"44\\\" \\n                        max=\\\"96\\\" \\n                        value=\\\"\").concat(prefs.size || 64, \"\\\"\\n                        class=\\\"slider\\\"\\n                        data-pref=\\\"dock.size\\\"\\n                    />\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"dock.magnification.enabled\\\"\\n                            \").concat((_prefs$magnification = prefs.magnification) !== null && _prefs$magnification !== void 0 && _prefs$magnification.enabled ? 'checked' : '', \"\\n                        />\\n                        Enable magnification\\n                    </label>\\n                </div>\\n\\n                \").concat((_prefs$magnification2 = prefs.magnification) !== null && _prefs$magnification2 !== void 0 && _prefs$magnification2.enabled ? \"\\n                    <div class=\\\"preference-group\\\">\\n                        <label>Magnification Scale <span class=\\\"value-label\\\">\".concat(((_prefs$magnification3 = prefs.magnification) === null || _prefs$magnification3 === void 0 ? void 0 : _prefs$magnification3.scale) || 1.5, \"x</span></label>\\n                        <input \\n                            type=\\\"range\\\" \\n                            min=\\\"1.2\\\" \\n                            max=\\\"2.0\\\" \\n                            step=\\\"0.1\\\"\\n                            value=\\\"\").concat(((_prefs$magnification4 = prefs.magnification) === null || _prefs$magnification4 === void 0 ? void 0 : _prefs$magnification4.scale) || 1.5, \"\\\"\\n                            class=\\\"slider\\\"\\n                            data-pref=\\\"dock.magnification.scale\\\"\\n                        />\\n                    </div>\\n                \") : '', \"\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"dock.auto_hide\\\"\\n                            \").concat(prefs.auto_hide ? 'checked' : '', \"\\n                        />\\n                        Auto-hide dock\\n                    </label>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render Terminal tab (Part 1 - appearance/theme)\r\n     */\n  }, {\n    key: \"renderTerminalTab\",\n    value: function renderTerminalTab() {\n      var _this$preferences4;\n      var prefs = ((_this$preferences4 = this.preferences) === null || _this$preferences4 === void 0 ? void 0 : _this$preferences4.terminal) || {};\n      var appearance = prefs.appearance || {};\n      var behavior = prefs.behavior || {};\n\n      // Get current theme\n      var currentTheme = appearance.theme || 'default';\n      var currentThemeData = _terminal_themes_TerminalThemes_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"][currentTheme];\n\n      // Generate theme options from TERMINAL_THEMES\n      var themeOptions = Object.entries(_terminal_themes_TerminalThemes_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]).map(function (_ref) {\n        var _ref2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, 2),\n          key = _ref2[0],\n          theme = _ref2[1];\n        var selected = currentTheme === key ? 'selected' : '';\n        return \"<option value=\\\"\".concat(key, \"\\\" \").concat(selected, \">\").concat(theme.name, \"</option>\");\n      }).join('');\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"terminal\\\">\\n                <h2>Terminal Settings</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>Current Theme</label>\\n                    <div class=\\\"current-theme-display\\\">\\n                        <div class=\\\"theme-preview\\\" style=\\\"\\n                            background: \".concat(currentThemeData.background, \";\\n                            color: \").concat(currentThemeData.foreground, \";\\n                            border: 1px solid var(--pref-border);\\n                            border-radius: 6px;\\n                            padding: 12px;\\n                            font-family: monospace;\\n                            font-size: 11px;\\n                            margin-bottom: 8px;\\n                        \\\">\\n                            <div>\").concat(currentThemeData.name, \"</div>\\n                            <div style=\\\"opacity: 0.7; font-size: 10px;\\\">\").concat(currentThemeData.description || 'Terminal theme', \"</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>Theme</label>\\n                    <select data-pref=\\\"terminal.appearance.theme\\\">\\n                        \").concat(themeOptions, \"\\n                    </select>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Font Family</label>\\n                    <select data-pref=\\\"terminal.appearance.font_family\\\">\\n                        <option value=\\\"Menlo\\\" \").concat(appearance.font_family === 'Menlo' ? 'selected' : '', \">Menlo (Default)</option>\\n                        <option value=\\\"Monaco\\\" \").concat(appearance.font_family === 'Monaco' ? 'selected' : '', \">Monaco</option>\\n                        <option value=\\\"Fira Code\\\" \").concat(appearance.font_family === 'Fira Code' ? 'selected' : '', \">Fira Code (Ligatures)</option>\\n                        <option value=\\\"JetBrains Mono\\\" \").concat(appearance.font_family === 'JetBrains Mono' ? 'selected' : '', \">JetBrains Mono</option>\\n                        <option value=\\\"Cascadia Code\\\" \").concat(appearance.font_family === 'Cascadia Code' ? 'selected' : '', \">Cascadia Code</option>\\n                        <option value=\\\"Source Code Pro\\\" \").concat(appearance.font_family === 'Source Code Pro' ? 'selected' : '', \">Source Code Pro</option>\\n                        <option value=\\\"Hack\\\" \").concat(appearance.font_family === 'Hack' ? 'selected' : '', \">Hack</option>\\n                        <option value=\\\"IBM Plex Mono\\\" \").concat(appearance.font_family === 'IBM Plex Mono' ? 'selected' : '', \">IBM Plex Mono</option>\\n                        <option value=\\\"Inconsolata\\\" \").concat(appearance.font_family === 'Inconsolata' ? 'selected' : '', \">Inconsolata</option>\\n                        <option value=\\\"Roboto Mono\\\" \").concat(appearance.font_family === 'Roboto Mono' ? 'selected' : '', \">Roboto Mono</option>\\n                        <option value=\\\"Ubuntu Mono\\\" \").concat(appearance.font_family === 'Ubuntu Mono' ? 'selected' : '', \">Ubuntu Mono</option>\\n                        <option value=\\\"Courier New\\\" \").concat(appearance.font_family === 'Courier New' ? 'selected' : '', \">Courier New</option>\\n                        <option value=\\\"Consolas\\\" \").concat(appearance.font_family === 'Consolas' ? 'selected' : '', \">Consolas</option>\\n                        <option value=\\\"SF Mono\\\" \").concat(appearance.font_family === 'SF Mono' ? 'selected' : '', \">SF Mono</option>\\n                    </select>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Font Size <span class=\\\"value-label\\\">\").concat(appearance.font_size || 11, \"px</span></label>\\n                    <input \\n                        type=\\\"range\\\" \\n                        min=\\\"8\\\" \\n                        max=\\\"24\\\" \\n                        value=\\\"\").concat(appearance.font_size || 11, \"\\\"\\n                        class=\\\"slider\\\"\\n                        data-pref=\\\"terminal.appearance.font_size\\\"\\n                    />\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Line Height <span class=\\\"value-label\\\">\").concat(appearance.line_height || 1.2, \"</span></label>\\n                    <input \\n                        type=\\\"range\\\" \\n                        min=\\\"1.0\\\" \\n                        max=\\\"2.0\\\" \\n                        step=\\\"0.1\\\"\\n                        value=\\\"\").concat(appearance.line_height || 1.2, \"\\\"\\n                        class=\\\"slider\\\"\\n                        data-pref=\\\"terminal.appearance.line_height\\\"\\n                    />\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Cursor Style</label>\\n                    <select data-pref=\\\"terminal.appearance.cursor_style\\\">\\n                        <option value=\\\"block\\\" \").concat(appearance.cursor_style === 'block' ? 'selected' : '', \">Block</option>\\n                        <option value=\\\"underline\\\" \").concat(appearance.cursor_style === 'underline' ? 'selected' : '', \">Underline</option>\\n                        <option value=\\\"bar\\\" \").concat(appearance.cursor_style === 'bar' ? 'selected' : '', \">Bar</option>\\n                    </select>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"terminal.appearance.cursor_blink\\\"\\n                            \").concat(appearance.cursor_blink !== false ? 'checked' : '', \"\\n                        />\\n                        Blinking Cursor\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>History Size <span class=\\\"value-label\\\">\").concat(behavior.history_size || 1000, \"</span></label>\\n                    <input \\n                        type=\\\"range\\\" \\n                        min=\\\"100\\\" \\n                        max=\\\"10000\\\" \\n                        step=\\\"100\\\"\\n                        value=\\\"\").concat(behavior.history_size || 1000, \"\\\"\\n                        class=\\\"slider\\\"\\n                        data-pref=\\\"terminal.behavior.history_size\\\"\\n                    />\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"terminal.behavior.bell_sound\\\"\\n                            \").concat(behavior.bell_sound !== false ? 'checked' : '', \"\\n                        />\\n                        Bell Sound\\n                    </label>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render Performance tab\r\n     */\n  }, {\n    key: \"renderPerformanceTab\",\n    value: function renderPerformanceTab() {\n      var _this$preferences5, _this$preferences6, _this$preferences7;\n      var prefs = ((_this$preferences5 = this.preferences) === null || _this$preferences5 === void 0 ? void 0 : _this$preferences5.performance) || {};\n      var boot = ((_this$preferences6 = this.preferences) === null || _this$preferences6 === void 0 ? void 0 : _this$preferences6.boot) || {};\n      var animations = ((_this$preferences7 = this.preferences) === null || _this$preferences7 === void 0 ? void 0 : _this$preferences7.animations) || {};\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"performance\\\">\\n                <h2>Performance Settings</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"boot.animation_enabled\\\"\\n                            \".concat(boot.animation_enabled !== false ? 'checked' : '', \"\\n                        />\\n                        Enable boot animation\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"boot.skip_after_session\\\"\\n                            \").concat(boot.skip_after_session ? 'checked' : '', \"\\n                        />\\n                        Skip boot after session\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>Animation Speed</label>\\n                    <select data-pref=\\\"animations.speed\\\">\\n                        <option value=\\\"slow\\\" \").concat(animations.speed === 'slow' ? 'selected' : '', \">Slow</option>\\n                        <option value=\\\"normal\\\" \").concat(animations.speed === 'normal' || !animations.speed ? 'selected' : '', \">Normal</option>\\n                        <option value=\\\"fast\\\" \").concat(animations.speed === 'fast' ? 'selected' : '', \">Fast</option>\\n                        <option value=\\\"off\\\" \").concat(animations.speed === 'off' ? 'selected' : '', \">Off</option>\\n                    </select>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"animations.reduced_motion\\\"\\n                            \").concat(animations.reduced_motion ? 'checked' : '', \"\\n                        />\\n                        Reduce motion (accessibility)\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <button class=\\\"btn-secondary\\\" data-action=\\\"clear-cache\\\">Clear Cache</button>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render Privacy tab\r\n     */\n  }, {\n    key: \"renderPrivacyTab\",\n    value: function renderPrivacyTab() {\n      var _this$preferences8;\n      var prefs = ((_this$preferences8 = this.preferences) === null || _this$preferences8 === void 0 ? void 0 : _this$preferences8.privacy) || {};\n      return \"\\n            <div class=\\\"preferences-tab-content\\\" data-tab=\\\"privacy\\\">\\n                <h2>Privacy Settings</h2>\\n                \\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"privacy.remember_session\\\"\\n                            \".concat(prefs.remember_session !== false ? 'checked' : '', \"\\n                        />\\n                        Remember session\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"privacy.restore_windows\\\"\\n                            \").concat(prefs.restore_windows ? 'checked' : '', \"\\n                        />\\n                        Restore window positions\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <label>\\n                        <input \\n                            type=\\\"checkbox\\\" \\n                            data-pref=\\\"privacy.analytics\\\"\\n                            \").concat(prefs.analytics ? 'checked' : '', \"\\n                        />\\n                        Enable analytics\\n                    </label>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <button class=\\\"btn-secondary\\\" data-action=\\\"export-settings\\\">Export Settings</button>\\n                    <button class=\\\"btn-secondary\\\" data-action=\\\"import-settings\\\">Import Settings</button>\\n                </div>\\n\\n                <div class=\\\"preference-group\\\">\\n                    <button class=\\\"btn-danger\\\" data-action=\\\"reset-all\\\">Reset to Defaults</button>\\n                </div>\\n            </div>\\n        \");\n    }\n\n    /**\r\n     * Render theme options\r\n     */\n  }, {\n    key: \"renderThemeOptions\",\n    value: function renderThemeOptions(currentTheme) {\n      var themes = ['light', 'dark', 'auto'];\n      return themes.map(function (theme) {\n        return \"\\n            <button \\n                class=\\\"theme-btn \".concat(currentTheme === theme ? 'active' : '', \"\\\"\\n                data-pref=\\\"appearance.theme\\\"\\n                data-value=\\\"\").concat(theme, \"\\\"\\n            >\\n                \").concat(theme.charAt(0).toUpperCase() + theme.slice(1), \"\\n            </button>\\n        \");\n      }).join('');\n    }\n\n    /**\r\n     * Attach event listeners\r\n     */\n  }, {\n    key: \"attachEventListeners\",\n    value: function attachEventListeners(container) {\n      // Tab switching\n      this.attachTabListeners(container);\n\n      // Preference changes\n      this.attachPreferenceListeners(container);\n\n      // Action buttons\n      this.attachActionListeners(container);\n    }\n\n    /**\r\n     * Attach preference change listeners\r\n     */\n  }, {\n    key: \"attachPreferenceListeners\",\n    value: function attachPreferenceListeners(container) {\n      var _this2 = this;\n      // Text inputs, selects, color pickers\n      container.addEventListener('change', function (e) {\n        var pref = e.target.dataset.pref;\n        if (!pref) return;\n        var value = e.target.value;\n\n        // Handle checkboxes\n        if (e.target.type === 'checkbox') {\n          value = e.target.checked;\n        }\n\n        // Handle ranges\n        if (e.target.type === 'range') {\n          value = parseFloat(value);\n          // Convert percentage to decimal for transparency\n          if (pref === 'appearance.transparency') {\n            value = value / 100;\n          }\n        }\n        _this2.updatePreference(pref, value);\n      });\n\n      // Range sliders - update value label\n      container.addEventListener('input', function (e) {\n        if (e.target.type === 'range') {\n          var label = e.target.parentElement.querySelector('.value-label');\n          if (label) {\n            var _e$target$dataset$pre;\n            var displayValue = e.target.value;\n            if (e.target.dataset.pref === 'appearance.transparency') {\n              displayValue = displayValue + '%';\n            } else if ((_e$target$dataset$pre = e.target.dataset.pref) !== null && _e$target$dataset$pre !== void 0 && _e$target$dataset$pre.includes('scale')) {\n              displayValue = parseFloat(displayValue).toFixed(1) + 'x';\n            } else {\n              var _e$target$dataset$pre2;\n              displayValue = displayValue + ((_e$target$dataset$pre2 = e.target.dataset.pref) !== null && _e$target$dataset$pre2 !== void 0 && _e$target$dataset$pre2.includes('size') ? 'px' : '');\n            }\n            label.textContent = displayValue;\n          }\n        }\n      });\n\n      // Button-based preferences\n      container.addEventListener('click', function (e) {\n        var btn = e.target.closest('[data-pref][data-value]');\n        if (btn) {\n          var pref = btn.dataset.pref;\n          var value = btn.dataset.value;\n          _this2.updatePreference(pref, value);\n\n          // Update active state\n          btn.parentElement.querySelectorAll('[data-pref]').forEach(function (b) {\n            return b.classList.remove('active');\n          });\n          btn.classList.add('active');\n        }\n      });\n    }\n\n    /**\r\n     * Attach action button listeners\r\n     */\n  }, {\n    key: \"attachActionListeners\",\n    value: function attachActionListeners(container) {\n      var _this3 = this;\n      container.addEventListener('click', function (e) {\n        var action = e.target.dataset.action;\n        if (!action) return;\n        switch (action) {\n          case 'clear-cache':\n            _this3.clearCache();\n            break;\n          case 'export-settings':\n            _this3.exportSettings();\n            break;\n          case 'import-settings':\n            _this3.importSettings();\n            break;\n          case 'reset-all':\n            _this3.resetToDefaults();\n            break;\n        }\n      });\n    }\n\n    /**\r\n     * Update a single preference\r\n     */\n  }, {\n    key: \"updatePreference\",\n    value: function updatePreference(path, value) {\n      console.log('💾 Updating preference:', path, '=', value);\n      var keys = path.split('.');\n      var current = this.preferences;\n\n      // Navigate to the nested property\n      for (var i = 0; i < keys.length - 1; i++) {\n        if (!current[keys[i]]) {\n          current[keys[i]] = {};\n        }\n        current = current[keys[i]];\n      }\n\n      // Set the value\n      current[keys[keys.length - 1]] = value;\n\n      // Save to localStorage\n      this.savePreferences();\n\n      // Apply the change immediately\n      this.applyPreference(path, value);\n      this.unsavedChanges = true;\n    }\n\n    /**\r\n     * Apply a preference change immediately\r\n     */\n  }, {\n    key: \"applyPreference\",\n    value: function applyPreference(path, value) {\n      var _this4 = this;\n      // Apply immediate UI changes for certain preferences\n      if (path === 'appearance.accent_color') {\n        // Update CSS variable immediately for accent color\n        document.documentElement.style.setProperty('--accent-color', value);\n        console.log('🎨 Applied accent color:', value);\n      }\n\n      // Clear previous timeout\n      if (this.previewTimeout) {\n        clearTimeout(this.previewTimeout);\n      }\n\n      // Debounce and emit event\n      this.previewTimeout = setTimeout(function () {\n        console.log('📡 Emitting preference:changed event:', path, value);\n\n        // Emit singular event (new style) - per-preference granular updates\n        _EventBus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].emit('preference:changed', {\n          path: path,\n          value: value,\n          preferences: _this4.preferences\n        });\n\n        // Emit plural event (legacy style) - full preferences object\n        _EventBus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].emit('preferences:changed', {\n          data: _this4.preferences\n        });\n      }, 300);\n    }\n\n    /**\r\n     * Save preferences to localStorage\r\n     */\n  }, {\n    key: \"savePreferences\",\n    value: function savePreferences() {\n      try {\n        localStorage.setItem('userPreferences', JSON.stringify(this.preferences));\n        console.log('Preferences saved to localStorage');\n      } catch (error) {\n        console.error('Failed to save preferences:', error);\n      }\n    }\n\n    /**\r\n     * Apply all stored preferences on init\r\n     */\n  }, {\n    key: \"applyStoredPreferences\",\n    value: function applyStoredPreferences() {\n      var _this$preferences$app,\n        _this5 = this;\n      if (!this.preferences) return;\n\n      // Apply accent color immediately\n      if ((_this$preferences$app = this.preferences.appearance) !== null && _this$preferences$app !== void 0 && _this$preferences$app.accent_color) {\n        document.documentElement.style.setProperty('--accent-color', this.preferences.appearance.accent_color);\n        console.log('🎨 Loaded accent color:', this.preferences.appearance.accent_color);\n      }\n\n      // Emit initial preferences\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].emit('preferences:loaded', this.preferences);\n\n      // Load wallpapers if on desktop tab\n      setTimeout(function () {\n        return _this5.loadWallpapersIfNeeded();\n      }, 100);\n    }\n\n    /**\r\n     * Load wallpapers if desktop tab is visible\r\n     */\n  }, {\n    key: \"loadWallpapersIfNeeded\",\n    value: function () {\n      var _loadWallpapersIfNeeded = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().mark(function _callee3() {\n        var galleryContainer, response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              galleryContainer = document.getElementById('wallpaper-gallery-container');\n              if (galleryContainer) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              _context3.prev = 3;\n              _context3.next = 6;\n              return fetch('/wallpapers-manifest.json');\n            case 6:\n              response = _context3.sent;\n              _context3.next = 9;\n              return response.json();\n            case 9:\n              data = _context3.sent;\n              this.renderWallpaperGallery(galleryContainer, data.wallpapers || []);\n              _context3.next = 17;\n              break;\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.error('Failed to load wallpapers:', _context3.t0);\n              galleryContainer.innerHTML = '<div class=\"wallpaper-error\">Failed to load wallpapers</div>';\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 13]]);\n      }));\n      function loadWallpapersIfNeeded() {\n        return _loadWallpapersIfNeeded.apply(this, arguments);\n      }\n      return loadWallpapersIfNeeded;\n    }()\n    /**\r\n     * Render wallpaper gallery\r\n     */\n  }, {\n    key: \"renderWallpaperGallery\",\n    value: function renderWallpaperGallery(container, wallpapers) {\n      var _this6 = this;\n      // Parse current wallpaper from localStorage (Desktop saves it as JSON object)\n      var currentWallpaperId = 'sonoma-light';\n      try {\n        var stored = localStorage.getItem('current_wallpaper');\n        console.log('🖼️ Stored wallpaper data:', stored);\n        if (stored) {\n          var parsed = JSON.parse(stored);\n          currentWallpaperId = parsed.id || parsed;\n          console.log('🎯 Current wallpaper ID:', currentWallpaperId);\n        }\n      } catch (e) {\n        console.warn('Failed to parse wallpaper, using string:', e);\n        // If parsing fails, use the string directly\n        currentWallpaperId = localStorage.getItem('current_wallpaper') || 'sonoma-light';\n      }\n      var gallery = document.createElement('div');\n      gallery.className = 'wallpaper-gallery';\n      wallpapers.forEach(function (wallpaper) {\n        var item = document.createElement('div');\n        var isSelected = currentWallpaperId === wallpaper.id;\n        item.className = \"wallpaper-item \".concat(isSelected ? 'selected' : '');\n        if (isSelected) {\n          console.log('✅ Selected wallpaper:', wallpaper.name, wallpaper.id);\n        }\n        item.dataset.wallpaperId = wallpaper.id;\n        item.dataset.wallpaperFilename = wallpaper.filename;\n        var img = document.createElement('img');\n        // Use thumbnail path for better performance\n        var thumbnailPath = \"/images/wallpapers/thumbnails/\".concat(wallpaper.filename);\n        var fallbackPath = \"/images/wallpapers/\".concat(wallpaper.filename);\n        img.src = thumbnailPath;\n        img.alt = wallpaper.name;\n        img.loading = 'lazy';\n\n        // Fallback to full image if thumbnail doesn't exist\n        var hasFallenBack = false;\n        img.onerror = function () {\n          if (!hasFallenBack && wallpaper.filename) {\n            hasFallenBack = true;\n            img.src = fallbackPath;\n          } else if (!wallpaper.filename) {\n            // If no filename, remove the broken image\n            img.style.display = 'none';\n          }\n        };\n        var info = document.createElement('div');\n        info.className = 'wallpaper-info';\n        info.innerHTML = \"\\n                <div class=\\\"wallpaper-name\\\">\".concat(wallpaper.name, \"</div>\\n                <div class=\\\"wallpaper-version\\\">\").concat(wallpaper.version, \"</div>\\n            \");\n        item.appendChild(img);\n        item.appendChild(info);\n\n        // Add click handler\n        item.addEventListener('click', function () {\n          return _this6.selectWallpaper(wallpaper, item);\n        });\n        gallery.appendChild(item);\n      });\n      container.innerHTML = '';\n      container.appendChild(gallery);\n    }\n\n    /**\r\n     * Select a wallpaper\r\n     */\n  }, {\n    key: \"selectWallpaper\",\n    value: function selectWallpaper(wallpaper, element) {\n      // Remove previous selection\n      document.querySelectorAll('.wallpaper-item').forEach(function (item) {\n        item.classList.remove('selected');\n      });\n\n      // Mark as selected\n      element.classList.add('selected');\n\n      // Save to localStorage\n      localStorage.setItem('current_wallpaper', wallpaper.id);\n\n      // Emit event to change wallpaper immediately\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].emit('wallpaper:change', {\n        id: wallpaper.id,\n        filename: wallpaper.filename,\n        type: wallpaper.type\n      });\n      console.log('Wallpaper selected:', wallpaper.name);\n    }\n\n    /**\r\n     * Update UI after tab switch\r\n     */\n  }, {\n    key: \"updateUI\",\n    value: function updateUI(container) {\n      // Update sidebar\n      var sidebar = container.querySelector('.preferences-sidebar');\n      sidebar.innerHTML = this.renderSidebar();\n\n      // Update content\n      var content = container.querySelector('.preferences-content');\n      content.innerHTML = this.renderContent();\n\n      // Reattach ALL listeners (including tab listeners)\n      this.attachTabListeners(container);\n      this.attachPreferenceListeners(container);\n      this.attachActionListeners(container);\n\n      // Load wallpapers if desktop tab\n      if (this.currentTab === 'desktop') {\n        this.loadWallpapersIfNeeded();\n      }\n    }\n\n    /**\r\n     * Attach tab switching listeners\r\n     */\n  }, {\n    key: \"attachTabListeners\",\n    value: function attachTabListeners(container) {\n      var _this7 = this;\n      container.querySelectorAll('.preferences-tab').forEach(function (tab) {\n        tab.addEventListener('click', function (e) {\n          _this7.currentTab = e.currentTarget.dataset.tab;\n          _this7.updateUI(container);\n        });\n      });\n    }\n\n    /**\r\n     * Clear cache\r\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      if (confirm('Clear all cached data? This will reload the page.')) {\n        localStorage.removeItem('wallpaperCache');\n        localStorage.removeItem('portfolioCache');\n        location.reload();\n      }\n    }\n\n    /**\r\n     * Export settings to JSON file\r\n     */\n  }, {\n    key: \"exportSettings\",\n    value: function exportSettings() {\n      var data = JSON.stringify(this.preferences, null, 2);\n      var blob = new Blob([data], {\n        type: 'application/json'\n      });\n      var url = URL.createObjectURL(blob);\n      var a = document.createElement('a');\n      a.href = url;\n      a.download = 'preferences-export.json';\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n\n    /**\r\n     * Import settings from JSON file\r\n     */\n  }, {\n    key: \"importSettings\",\n    value: function importSettings() {\n      var _this8 = this;\n      var input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'application/json';\n      input.onchange = function (e) {\n        var file = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function (event) {\n          try {\n            var imported = JSON.parse(event.target.result);\n            _this8.preferences = imported;\n            _this8.savePreferences();\n            location.reload();\n          } catch (error) {\n            alert('Invalid preferences file');\n          }\n        };\n        reader.readAsText(file);\n      };\n      input.click();\n    }\n\n    /**\r\n     * Reset all preferences to defaults\r\n     */\n  }, {\n    key: \"resetToDefaults\",\n    value: function resetToDefaults() {\n      if (confirm('Reset all preferences to defaults? This cannot be undone.')) {\n        localStorage.removeItem('userPreferences');\n        location.reload();\n      }\n    }\n\n    /**\r\n     * Get default preferences\r\n     */\n  }, {\n    key: \"getDefaultPreferences\",\n    value: function getDefaultPreferences() {\n      return {\n        appearance: {\n          theme: 'auto',\n          accent_color: _config_ColorConstants_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].SYSTEM_BLUE,\n          transparency: 0.8\n        },\n        desktop: {\n          wallpaper: {\n            auto_rotation: true\n          },\n          icons: {\n            size: 'medium'\n          }\n        },\n        dock: {\n          position: 'bottom',\n          size: 64,\n          magnification: {\n            enabled: true,\n            scale: 1.5\n          }\n        },\n        terminal: {\n          appearance: {\n            theme: 'matrix',\n            font_size: 14\n          },\n          behavior: {\n            history_size: 1000\n          }\n        },\n        performance: {},\n        privacy: {\n          remember_session: true\n        }\n      };\n    }\n\n    /**\r\n     * Render error state\r\n     */\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      var container = document.createElement('div');\n      container.className = 'preferences-error';\n      container.innerHTML = \"\\n            <h2>Failed to Load Preferences</h2>\\n            <p>Please try again later.</p>\\n        \";\n      return container;\n    }\n\n    /**\r\n     * Switch to a specific tab programmatically\r\n     * @param {string} tabId - The ID of the tab to switch to\r\n     */\n  }, {\n    key: \"switchTab\",\n    value: function switchTab(tabId) {\n      console.log('🔄 Switching to tab:', tabId);\n\n      // Validate tab exists\n      var validTab = this.tabs.find(function (tab) {\n        return tab.id === tabId;\n      });\n      if (!validTab) {\n        console.warn('Invalid tab ID:', tabId);\n        return;\n      }\n\n      // Update current tab\n      this.currentTab = tabId;\n\n      // Find the container and update UI\n      var container = document.querySelector('.preferences-container');\n      if (container) {\n        this.updateUI(container);\n\n        // Make sure the tab button is visually active\n        container.querySelectorAll('.preferences-tab').forEach(function (tab) {\n          if (tab.dataset.tab === tabId) {\n            tab.classList.add('active');\n            // Scroll tab into view if needed\n            tab.scrollIntoView({\n              behavior: 'smooth',\n              block: 'nearest'\n            });\n          } else {\n            tab.classList.remove('active');\n          }\n        });\n        console.log('✅ Tab switched to:', tabId);\n      } else {\n        console.warn('Preferences container not found in DOM');\n      }\n    }\n\n    /**\r\n     * Destroy component and cleanup\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.previewTimeout) {\n        clearTimeout(this.previewTimeout);\n      }\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///154\n");

/***/ })

}]);