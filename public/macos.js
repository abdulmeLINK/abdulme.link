"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["LinkOS"],{

/***/ 3272:
/*!**************************************************!*\
  !*** ./resources/js/components/LinkOS/Desktop.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 4467);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 467);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 3029);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ 2901);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ 4756);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../EventBus.js */ 2454);\n\n\n\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n\n\n/**\r\n * Desktop - LinkOS desktop experience with embedded boot animation and wallpaper system\r\n * Handles embedded boot sequence (via Blade), wallpaper management, icons, and context menu\r\n * Smart boot logic: 4-5s static on first visit, 1s quick on return visits\r\n */\nvar Desktop = /*#__PURE__*/function () {\n  function Desktop() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Desktop);\n    this.container = null;\n    this.bootOverlay = null;\n    this.wallpaperContainer = null;\n    this.iconsContainer = null;\n    this.contextMenu = null;\n\n    // State\n    this.isBooting = true; // Start with boot screen\n    this.currentWallpaper = null;\n    this.wallpapers = [];\n    this.desktopApps = [];\n    this.loadedAssets = new Set();\n    this.preferences = {};\n    this.sessionData = null;\n    this.rotationTimer = null;\n    this.wallpaperCache = new Map();\n    this.progressiveLoading = true;\n    this.bootScreen = null;\n\n    // Configuration\n    this.config = {\n      bootDuration: 4000,\n      wallpaperTransitionDuration: 1000,\n      rotationInterval: 30 * 60 * 1000,\n      // 30 minutes\n      maxCacheSize: 100 * 1024 * 1024,\n      // 100MB\n      iconGridSize: 80,\n      performanceMode: this.detectPerformanceMode()\n    };\n    this.init();\n  }\n\n  /**\r\n   * Initialize desktop component\r\n   */\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Desktop, [{\n    key: \"init\",\n    value: function () {\n      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {\n        var _this = this;\n        var bootOverlay;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                this.createElements();\n                this.bindEvents();\n\n                // Listen for boot completion from embedded boot screen\n                window.addEventListener('boot-complete', function () {\n                  _this.initializeAfterBoot();\n                });\n\n                // If no embedded boot screen is shown, initialize immediately\n                bootOverlay = document.getElementById('boot-screen-overlay');\n                if (!bootOverlay) {\n                  this.initializeAfterBoot();\n                }\n              } catch (error) {\n                console.error('Desktop: Initialization failed:', error);\n                this.showErrorState(error);\n              }\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\r\n     * Initialize desktop after boot sequence completes\r\n     */\n  }, {\n    key: \"initializeAfterBoot\",\n    value: function () {\n      var _initializeAfterBoot = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2() {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return Promise.all([this.loadPreferences(), this.loadWallpapers(),\n              // Load wallpapers first so they're available during boot\n              this.loadSessionData()]);\n            case 3:\n              _context2.next = 5;\n              return this.setInitialWallpaper();\n            case 5:\n              _context2.next = 7;\n              return this.loadDesktopApps();\n            case 7:\n              // Load saved icon positions before setup\n              this.loadIconPositions();\n\n              // Initialize desktop\n              _context2.next = 10;\n              return this.setupDesktop();\n            case 10:\n              // Mark desktop as ready\n              this.isBooting = false;\n              _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('desktop:ready', {\n                wallpapers: this.wallpapers.length,\n                preferences: Object.keys(this.preferences).length,\n                performanceMode: this.config.performanceMode\n              });\n              _context2.next = 17;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              this.handleError(_context2.t0);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 14]]);\n      }));\n      function initializeAfterBoot() {\n        return _initializeAfterBoot.apply(this, arguments);\n      }\n      return initializeAfterBoot;\n    }()\n    /**\r\n     * Create DOM elements\r\n     */\n  }, {\n    key: \"createElements\",\n    value: function createElements() {\n      // Get desktop container\n      this.container = document.getElementById('desktop');\n      if (!this.container) {\n        throw new Error('Desktop container not found');\n      }\n\n      // Create wallpaper container\n      this.wallpaperContainer = document.createElement('div');\n      this.wallpaperContainer.className = 'wallpaper-container';\n      this.wallpaperContainer.style.cssText = \"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n            background-size: cover;\\n            background-position: center;\\n            background-repeat: no-repeat;\\n            z-index: 1;\\n        \";\n\n      // Create icons container\n      this.iconsContainer = document.createElement('div');\n      this.iconsContainer.className = 'desktop-icons';\n      this.iconsContainer.style.cssText = \"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n            z-index: 2;\\n        \";\n\n      // Create context menu\n      this.contextMenu = document.createElement('div');\n      this.contextMenu.className = 'context-menu';\n      this.contextMenu.style.cssText = \"\\n            position: fixed;\\n            display: none;\\n            z-index: 9999;\\n        \";\n      this.contextMenu.innerHTML = this.createContextMenuHTML();\n\n      // Append to container\n      this.container.appendChild(this.wallpaperContainer);\n      this.container.appendChild(this.iconsContainer);\n      this.container.appendChild(this.contextMenu);\n    }\n\n    /**\r\n     * Create context menu HTML\r\n     */\n  }, {\n    key: \"createContextMenuHTML\",\n    value: function createContextMenuHTML() {\n      return \"\\n            <div class=\\\"context-menu-content\\\" style=\\\"\\n                background: rgba(30, 30, 30, 0.95);\\n                backdrop-filter: blur(20px);\\n                border-radius: 8px;\\n                padding: 8px 0;\\n                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\\n                min-width: 200px;\\n            \\\">\\n                <div class=\\\"menu-item\\\" data-action=\\\"change_wallpaper\\\" style=\\\"\\n                    padding: 8px 16px;\\n                    font-size: 14px;\\n                    cursor: pointer;\\n                    color: #fff;\\n                \\\">Change Wallpaper...</div>\\n                <div class=\\\"menu-separator\\\" style=\\\"height: 1px; background: #555; margin: 4px 0;\\\"></div>\\n                <div class=\\\"menu-item\\\" data-action=\\\"view_options\\\" style=\\\"\\n                    padding: 8px 16px;\\n                    font-size: 14px;\\n                    cursor: pointer;\\n                    color: #fff;\\n                \\\">View Options</div>\\n                <div class=\\\"menu-item\\\" data-action=\\\"get_info\\\" style=\\\"\\n                    padding: 8px 16px;\\n                    font-size: 14px;\\n                    cursor: pointer;\\n                    color: #fff;\\n                \\\">Get Info</div>\\n            </div>\\n        \";\n    }\n\n    /**\r\n     * Bind event handlers\r\n     */\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      // Global events\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on('preferences:changed', this.onPreferencesChanged.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on('wallpaper:change', this.changeWallpaper.bind(this));\n\n      // Window events\n      window.addEventListener('resize', this.onWindowResize.bind(this));\n      window.addEventListener('beforeunload', this.onBeforeUnload.bind(this));\n\n      // Desktop events\n      this.container.addEventListener('contextmenu', this.onContextMenu.bind(this));\n      this.container.addEventListener('click', this.onDesktopClick.bind(this));\n\n      // Context menu events\n      this.contextMenu.addEventListener('click', this.onContextMenuClick.bind(this));\n\n      // Performance monitoring\n      if (this.config.performanceMode === 'auto') {\n        this.setupPerformanceMonitoring();\n      }\n    }\n\n    /**\r\n     * Load user preferences\r\n     */\n  }, {\n    key: \"loadPreferences\",\n    value: function () {\n      var _loadPreferences = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch('/api/preferences');\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n            case 6:\n              data = _context3.sent;\n              if (data.success) {\n                this.preferences = data.data;\n              } else {\n                this.preferences = this.getDefaultPreferences();\n              }\n              _context3.next = 14;\n              break;\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.warn('Failed to load preferences, using defaults:', _context3.t0);\n              this.preferences = this.getDefaultPreferences();\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n      function loadPreferences() {\n        return _loadPreferences.apply(this, arguments);\n      }\n      return loadPreferences;\n    }()\n    /**\r\n     * Load wallpapers data with progressive loading\r\n     */\n  }, {\n    key: \"loadWallpapers\",\n    value: function () {\n      var _loadWallpapers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return fetch('/api/wallpapers');\n            case 3:\n              response = _context4.sent;\n              _context4.next = 6;\n              return response.json();\n            case 6:\n              data = _context4.sent;\n              if (data.success) {\n                this.wallpapers = data.data;\n\n                // Start progressive preloading of thumbnails\n                if (this.progressiveLoading) {\n                  this.preloadWallpaperThumbnails();\n                }\n\n                // Set up auto-rotation timer\n                this.setupWallpaperRotation();\n\n                // Wallpaper selection is handled by setInitialWallpaper() consistently\n                console.log('Wallpapers loaded, selection will be handled by setInitialWallpaper()');\n              } else {\n                this.wallpapers = this.getDefaultWallpapers();\n              }\n              _context4.next = 14;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.warn('Failed to load wallpapers, using defaults:', _context4.t0);\n              this.wallpapers = this.getDefaultWallpapers();\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 10]]);\n      }));\n      function loadWallpapers() {\n        return _loadWallpapers.apply(this, arguments);\n      }\n      return loadWallpapers;\n    }()\n    /**\r\n     * Load session data\r\n     */\n  }, {\n    key: \"loadSessionData\",\n    value: function () {\n      var _loadSessionData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5() {\n        var stored;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              try {\n                stored = localStorage.getItem('desktop_session');\n                if (stored) {\n                  this.sessionData = JSON.parse(stored);\n                } else {\n                  this.sessionData = this.getDefaultSessionData();\n                }\n              } catch (error) {\n                console.warn('Failed to load session data, using defaults:', error);\n                this.sessionData = this.getDefaultSessionData();\n              }\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function loadSessionData() {\n        return _loadSessionData.apply(this, arguments);\n      }\n      return loadSessionData;\n    }()\n    /**\r\n     * Load desktop applications data\r\n     */\n  }, {\n    key: \"loadDesktopApps\",\n    value: function () {\n      var _loadDesktopApps = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee6() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return fetch('/data/desktop-apps.json');\n            case 3:\n              response = _context6.sent;\n              _context6.next = 6;\n              return response.json();\n            case 6:\n              data = _context6.sent;\n              if (data && data.apps) {\n                this.desktopApps = data.apps;\n                this.createDesktopIcons();\n              } else {\n                this.desktopApps = this.getDefaultApps();\n                this.createDesktopIcons();\n              }\n              _context6.next = 15;\n              break;\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.warn('Failed to load desktop apps, using defaults:', _context6.t0);\n              this.desktopApps = this.getDefaultApps();\n              this.createDesktopIcons();\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 10]]);\n      }));\n      function loadDesktopApps() {\n        return _loadDesktopApps.apply(this, arguments);\n      }\n      return loadDesktopApps;\n    }()\n  }, {\n    key: \"setupDesktop\",\n    value: function () {\n      var _setupDesktop = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee7() {\n        var _this$preferences$app;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              // Wallpaper is handled by setInitialWallpaper() - don't duplicate logic\n              if (!this.currentWallpaper) {\n                console.warn('Desktop: No wallpaper set, using fallback');\n              }\n\n              // Apply theme preferences\n              if ((_this$preferences$app = this.preferences.appearance) !== null && _this$preferences$app !== void 0 && _this$preferences$app.theme) {\n                document.documentElement.setAttribute('data-theme', this.preferences.appearance.theme);\n              }\n\n              // Create desktop icons\n              this.createDesktopIcons();\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function setupDesktop() {\n        return _setupDesktop.apply(this, arguments);\n      }\n      return setupDesktop;\n    }()\n    /**\r\n     * Set initial wallpaper - Single source of truth for wallpaper selection\r\n     * Priority: 1) Saved user choice 2) Backend smart selection 3) Fallback\r\n     */\n  }, {\n    key: \"setInitialWallpaper\",\n    value: function () {\n      var _setInitialWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee8() {\n        var wallpaper, selectionSource, pageLoadWallpaper;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              wallpaper = null;\n              selectionSource = 'none'; // Priority 1: Check for saved user wallpaper preference\n              wallpaper = this.getSavedWallpaper();\n              if (wallpaper) {\n                selectionSource = 'saved_preference';\n              }\n\n              // Priority 2: Get wallpaper data that was selected during page load (same as boot screen)\n              if (wallpaper) {\n                _context8.next = 21;\n                break;\n              }\n              _context8.next = 8;\n              return this.getPageLoadWallpaperData();\n            case 8:\n              pageLoadWallpaper = _context8.sent;\n              if (!pageLoadWallpaper) {\n                _context8.next = 14;\n                break;\n              }\n              wallpaper = pageLoadWallpaper;\n              selectionSource = 'page_load';\n              _context8.next = 21;\n              break;\n            case 14:\n              _context8.next = 16;\n              return this.getBackendSelectedWallpaper();\n            case 16:\n              wallpaper = _context8.sent;\n              if (!wallpaper) {\n                _context8.next = 21;\n                break;\n              }\n              selectionSource = 'backend_smart_selection';\n              // Save this selection for consistency\n              _context8.next = 21;\n              return this.saveWallpaperSelection(wallpaper);\n            case 21:\n              // Priority 3: Fallback to first available wallpaper\n              if (!wallpaper && this.wallpapers.length > 0) {\n                wallpaper = this.wallpapers[0];\n                selectionSource = 'fallback';\n              }\n              if (!wallpaper) {\n                _context8.next = 26;\n                break;\n              }\n              _context8.next = 25;\n              return this.applyWallpaperConsistently(wallpaper);\n            case 25:\n              this.currentWallpaper = wallpaper;\n            case 26:\n              _context8.next = 31;\n              break;\n            case 28:\n              _context8.prev = 28;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('Failed to set initial wallpaper:', _context8.t0);\n            case 31:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 28]]);\n      }));\n      function setInitialWallpaper() {\n        return _setInitialWallpaper.apply(this, arguments);\n      }\n      return setInitialWallpaper;\n    }()\n    /**\r\n     * Get saved wallpaper from localStorage or session\r\n     * Returns the user's explicitly saved wallpaper choice\r\n     */\n  }, {\n    key: \"getSavedWallpaper\",\n    value: function getSavedWallpaper() {\n      var _this2 = this;\n      try {\n        var _this$sessionData;\n        // First check localStorage (highest priority)\n        var savedWallpaper = localStorage.getItem('current_wallpaper');\n        if (savedWallpaper) {\n          var wallpaperData = JSON.parse(savedWallpaper);\n          console.log('📁 Found saved wallpaper in localStorage:', wallpaperData.name);\n\n          // Find the full wallpaper object from our loaded wallpapers\n          if (this.wallpapers.length > 0) {\n            var fullWallpaper = this.wallpapers.find(function (w) {\n              return w.id === wallpaperData.id;\n            });\n            if (fullWallpaper) {\n              console.log('🎯 Matched saved wallpaper with loaded collection:', fullWallpaper.name);\n              return fullWallpaper;\n            }\n          }\n          console.log('📦 Using saved wallpaper data as-is:', wallpaperData.name);\n          return wallpaperData;\n        }\n\n        // Check session data as fallback\n        if ((_this$sessionData = this.sessionData) !== null && _this$sessionData !== void 0 && (_this$sessionData = _this$sessionData.wallpaper) !== null && _this$sessionData !== void 0 && _this$sessionData.id) {\n          console.log('📄 Found wallpaper in session data:', this.sessionData.wallpaper.name);\n\n          // Find the full wallpaper object from our loaded wallpapers\n          if (this.wallpapers.length > 0) {\n            var _fullWallpaper = this.wallpapers.find(function (w) {\n              return w.id === _this2.sessionData.wallpaper.id;\n            });\n            if (_fullWallpaper) {\n              console.log('🎯 Matched session wallpaper with loaded collection:', _fullWallpaper.name);\n              return _fullWallpaper;\n            }\n          }\n          return this.sessionData.wallpaper;\n        }\n        return null;\n      } catch (error) {\n        console.error('Error getting saved wallpaper:', error);\n        return null;\n      }\n    }\n\n    /**\r\n     * Get wallpaper selected by backend (same as boot screen)\r\n     * This ensures boot screen and desktop show the same wallpaper\r\n     */\n  }, {\n    key: \"getBackendSelectedWallpaper\",\n    value: function () {\n      var _getBackendSelectedWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee9() {\n        var isFirstVisit, userFingerprint, currentHour, response, data, _data$metadata, fullWallpaper;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              isFirstVisit = this.isFirstTimeUser();\n              userFingerprint = this.generateUserFingerprint();\n              currentHour = new Date().getHours();\n              console.log('🔄 Getting backend wallpaper selection:', {\n                isFirstVisit: isFirstVisit,\n                currentHour: currentHour,\n                fingerprint: userFingerprint.substring(0, 8) + '...'\n              });\n              _context9.next = 7;\n              return fetch(\"/api/wallpapers/smart-selection?hour=\".concat(currentHour, \"&fingerprint=\").concat(userFingerprint, \"&firstVisit=\").concat(isFirstVisit));\n            case 7:\n              response = _context9.sent;\n              _context9.next = 10;\n              return response.json();\n            case 10:\n              data = _context9.sent;\n              if (!(data.success && data.data)) {\n                _context9.next = 23;\n                break;\n              }\n              console.log('✅ Backend selection:', data.data.name, '| Method:', (_data$metadata = data.metadata) === null || _data$metadata === void 0 ? void 0 : _data$metadata.selectionMethod);\n\n              // Find the full wallpaper object from our loaded wallpapers\n              fullWallpaper = this.wallpapers.find(function (w) {\n                return w.id === data.data.id;\n              });\n              if (!fullWallpaper) {\n                _context9.next = 19;\n                break;\n              }\n              console.log('🎯 Found matching wallpaper in local collection:', fullWallpaper.name);\n              return _context9.abrupt(\"return\", fullWallpaper);\n            case 19:\n              console.log('📦 Using API wallpaper data:', data.data.name);\n              return _context9.abrupt(\"return\", data.data);\n            case 21:\n              _context9.next = 25;\n              break;\n            case 23:\n              console.warn('⚠️ Backend selection failed:', data.error);\n              return _context9.abrupt(\"return\", null);\n            case 25:\n              _context9.next = 31;\n              break;\n            case 27:\n              _context9.prev = 27;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error('❌ Failed to get backend wallpaper selection:', _context9.t0);\n              return _context9.abrupt(\"return\", null);\n            case 31:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 27]]);\n      }));\n      function getBackendSelectedWallpaper() {\n        return _getBackendSelectedWallpaper.apply(this, arguments);\n      }\n      return getBackendSelectedWallpaper;\n    }()\n    /**\r\n     * Apply wallpaper consistently to both body and wallpaper container\r\n     * Ensures smooth transition and consistent appearance\r\n     */\n  }, {\n    key: \"applyWallpaperConsistently\",\n    value: function () {\n      var _applyWallpaperConsistently = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee10(wallpaper) {\n        var imageUrl;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (wallpaper) {\n                _context10.next = 2;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 2:\n              imageUrl = wallpaper.fullImage || wallpaper.url || wallpaper.image;\n              if (imageUrl) {\n                _context10.next = 6;\n                break;\n              }\n              console.error('No image URL found for wallpaper:', wallpaper);\n              return _context10.abrupt(\"return\");\n            case 6:\n              _context10.next = 8;\n              return this.preloadWallpaperImage(imageUrl);\n            case 8:\n              // Apply to both body (for boot consistency) and container (for desktop)\n              this.applyWallpaperWithTransition(imageUrl);\n              console.log('🎨 Wallpaper applied consistently:', wallpaper.name);\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function applyWallpaperConsistently(_x) {\n        return _applyWallpaperConsistently.apply(this, arguments);\n      }\n      return applyWallpaperConsistently;\n    }()\n    /**\r\n     * Preload wallpaper image to ensure smooth application\r\n     */\n  }, {\n    key: \"preloadWallpaperImage\",\n    value: function () {\n      var _preloadWallpaperImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee11(imageUrl) {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var img = new Image();\n                img.onload = function () {\n                  console.log('🖼️ Wallpaper preloaded successfully');\n                  resolve();\n                };\n                img.onerror = function () {\n                  console.warn('⚠️ Failed to preload wallpaper, continuing anyway');\n                  resolve(); // Don't reject, continue with application\n                };\n                img.src = imageUrl;\n              }));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }));\n      function preloadWallpaperImage(_x2) {\n        return _preloadWallpaperImage.apply(this, arguments);\n      }\n      return preloadWallpaperImage;\n    }()\n    /**\r\n     * Get wallpaper data that was selected during page load (from backend)\r\n     * This ensures boot screen and desktop show the same wallpaper\r\n     */\n  }, {\n    key: \"getPageLoadWallpaperData\",\n    value: function () {\n      var _getPageLoadWallpaperData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee12() {\n        var _window$AbdulmeApp, wallpaperData, fullWallpaper, _fullWallpaper2, wallpaperMeta, _wallpaperData, _fullWallpaper3;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              if (!((_window$AbdulmeApp = window.AbdulmeApp) !== null && _window$AbdulmeApp !== void 0 && (_window$AbdulmeApp = _window$AbdulmeApp.config) !== null && _window$AbdulmeApp !== void 0 && _window$AbdulmeApp.currentWallpaper)) {\n                _context12.next = 12;\n                break;\n              }\n              wallpaperData = window.AbdulmeApp.config.currentWallpaper;\n              console.log('📄 Found page load wallpaper from AbdulmeApp config:', wallpaperData.name);\n\n              // Find the full wallpaper object from our loaded wallpapers\n              fullWallpaper = this.wallpapers.find(function (w) {\n                return w.id === wallpaperData.id;\n              });\n              if (!fullWallpaper) {\n                _context12.next = 10;\n                break;\n              }\n              console.log('🎯 Matched with loaded wallpaper collection:', fullWallpaper.name);\n              return _context12.abrupt(\"return\", fullWallpaper);\n            case 10:\n              console.log('📦 Using backend wallpaper data as-is:', wallpaperData.name);\n              return _context12.abrupt(\"return\", wallpaperData);\n            case 12:\n              if (!window.selectedWallpaper) {\n                _context12.next = 16;\n                break;\n              }\n              console.log('📄 Found legacy page load wallpaper data:', window.selectedWallpaper.name);\n\n              // Find the full wallpaper object from our loaded wallpapers\n              _fullWallpaper2 = this.wallpapers.find(function (w) {\n                return w.id === window.selectedWallpaper.id;\n              });\n              return _context12.abrupt(\"return\", _fullWallpaper2 || window.selectedWallpaper);\n            case 16:\n              // Alternative: Check meta tag or inline script data\n              wallpaperMeta = document.querySelector('meta[name=\"selected-wallpaper\"]');\n              if (!wallpaperMeta) {\n                _context12.next = 22;\n                break;\n              }\n              _wallpaperData = JSON.parse(wallpaperMeta.getAttribute('content'));\n              console.log('🏷️ Found wallpaper in meta tag:', _wallpaperData.name);\n              _fullWallpaper3 = this.wallpapers.find(function (w) {\n                return w.id === _wallpaperData.id;\n              });\n              return _context12.abrupt(\"return\", _fullWallpaper3 || _wallpaperData);\n            case 22:\n              console.log('ℹ️ No page load wallpaper data found');\n              return _context12.abrupt(\"return\", null);\n            case 26:\n              _context12.prev = 26;\n              _context12.t0 = _context12[\"catch\"](0);\n              console.error('Error getting page load wallpaper data:', _context12.t0);\n              return _context12.abrupt(\"return\", null);\n            case 30:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[0, 26]]);\n      }));\n      function getPageLoadWallpaperData() {\n        return _getPageLoadWallpaperData.apply(this, arguments);\n      }\n      return getPageLoadWallpaperData;\n    }()\n    /**\r\n     * Event Handlers\r\n     */\n    /**\r\n     * Handle preferences changed event\r\n     */\n  }, {\n    key: \"onPreferencesChanged\",\n    value: function onPreferencesChanged(event) {\n      var _event$data$desktop, _event$data$appearanc;\n      console.log('Preferences changed:', event.data);\n      this.preferences = _objectSpread(_objectSpread({}, this.preferences), event.data);\n\n      // Apply preference changes\n      if ((_event$data$desktop = event.data.desktop) !== null && _event$data$desktop !== void 0 && _event$data$desktop.wallpaper) {\n        var wallpaper = this.wallpapers.find(function (w) {\n          return w.id === event.data.desktop.wallpaper;\n        });\n        if (wallpaper) {\n          this.changeWallpaper(wallpaper);\n        }\n      }\n      if ((_event$data$appearanc = event.data.appearance) !== null && _event$data$appearanc !== void 0 && _event$data$appearanc.theme) {\n        document.documentElement.setAttribute('data-theme', event.data.appearance.theme);\n      }\n    }\n\n    /**\r\n     * Handle wallpaper change with progressive loading\r\n     */\n  }, {\n    key: \"changeWallpaper\",\n    value: function () {\n      var _changeWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee13(wallpaper) {\n        var _this3 = this;\n        var fullImageUrl, preloadImage, verification;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!(!wallpaper || !this.wallpaperContainer)) {\n                _context13.next = 2;\n                break;\n              }\n              return _context13.abrupt(\"return\");\n            case 2:\n              console.log('Changing wallpaper to:', wallpaper.name || wallpaper.id);\n              _context13.prev = 3;\n              fullImageUrl = wallpaper.fullImage || wallpaper.url; // Clear old cache (keep only current wallpaper for performance)\n              this.wallpaperCache.clear();\n\n              // Check if full resolution is already cached\n              if (this.wallpaperCache.has(fullImageUrl)) {\n                // Use cached full resolution immediately with transition\n                this.applyWallpaperWithTransition(fullImageUrl);\n              } else {\n                // Show loading state if needed\n                this.wallpaperContainer.style.transition = 'opacity 0.3s ease';\n\n                // Preload full resolution in background\n                preloadImage = new Image();\n                preloadImage.onload = function () {\n                  // Cache the loaded image (only current one)\n                  _this3.wallpaperCache.set(fullImageUrl, preloadImage);\n                  // Apply with smooth transition\n                  _this3.applyWallpaperWithTransition(fullImageUrl);\n                };\n                preloadImage.onerror = function () {\n                  console.error('Failed to load wallpaper:', fullImageUrl);\n                  _this3.loadFallbackWallpaper();\n                };\n                preloadImage.src = fullImageUrl;\n              }\n              this.currentWallpaper = wallpaper;\n              console.log('✅ Current wallpaper set to:', wallpaper.name || wallpaper.id);\n              _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('wallpaper:changed', {\n                wallpaper: wallpaper\n              });\n\n              // Save to backend and local storage immediately\n              console.log('💾 Starting wallpaper save process...');\n              _context13.next = 13;\n              return this.saveWallpaperSelection(wallpaper);\n            case 13:\n              // Update session data immediately\n              this.saveCurrentState();\n              console.log('✅ Wallpaper change complete:', wallpaper.name || wallpaper.id);\n\n              // Verify save worked\n              verification = localStorage.getItem('current_wallpaper');\n              console.log('🔍 Verification - localStorage after save:', verification ? JSON.parse(verification).name : 'NONE');\n              _context13.next = 23;\n              break;\n            case 19:\n              _context13.prev = 19;\n              _context13.t0 = _context13[\"catch\"](3);\n              console.error('Failed to change wallpaper:', _context13.t0);\n              // Fallback to default wallpaper\n              this.loadFallbackWallpaper();\n            case 23:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this, [[3, 19]]);\n      }));\n      function changeWallpaper(_x3) {\n        return _changeWallpaper.apply(this, arguments);\n      }\n      return changeWallpaper;\n    }()\n    /**\r\n     * Save wallpaper selection - Single source of truth for persistence\r\n     * Saves to both localStorage (immediate) and backend (for sync)\r\n     */\n  }, {\n    key: \"saveWallpaperSelection\",\n    value: function () {\n      var _saveWallpaperSelection = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee14(wallpaper) {\n        var wallpaperData;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              try {\n                console.log('💾 Saving wallpaper selection:', wallpaper.name || wallpaper.id);\n\n                // Create standardized wallpaper data\n                wallpaperData = {\n                  id: wallpaper.id,\n                  name: wallpaper.name,\n                  thumbnail: wallpaper.thumbnail,\n                  fullImage: wallpaper.fullImage,\n                  category: wallpaper.category,\n                  type: wallpaper.type,\n                  colors: wallpaper.colors,\n                  savedAt: Date.now(),\n                  source: 'user_selection'\n                }; // Save to localStorage immediately (critical for persistence)\n                localStorage.setItem('current_wallpaper', JSON.stringify(wallpaperData));\n                console.log('✅ Saved to localStorage:', wallpaperData.name);\n\n                // Mark as visited if this is first selection\n                if (this.isFirstTimeUser()) {\n                  localStorage.setItem('portfolio_visited', new Date().toISOString());\n                  console.log('✅ Marked first visit complete');\n                }\n\n                // Save to backend for sync (non-blocking)\n                this.saveToBackend(wallpaperData)[\"catch\"](function (error) {\n                  console.warn('⚠️ Backend save failed (non-critical):', error.message);\n                });\n\n                // Update session data\n                this.saveCurrentState();\n              } catch (error) {\n                console.error('❌ Critical error saving wallpaper selection:', error);\n              }\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function saveWallpaperSelection(_x4) {\n        return _saveWallpaperSelection.apply(this, arguments);\n      }\n      return saveWallpaperSelection;\n    }()\n    /**\r\n     * Save wallpaper to backend (async, non-blocking)\r\n     */\n  }, {\n    key: \"saveToBackend\",\n    value: function () {\n      var _saveToBackend = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee15(wallpaperData) {\n        var _document$querySelect;\n        var response;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return fetch('/api/wallpapers/set-current', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-CSRF-TOKEN': ((_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content')) || ''\n                },\n                body: JSON.stringify(wallpaperData)\n              });\n            case 2:\n              response = _context15.sent;\n              if (!response.ok) {\n                _context15.next = 7;\n                break;\n              }\n              console.log('✅ Wallpaper saved to backend');\n              _context15.next = 8;\n              break;\n            case 7:\n              throw new Error(\"Backend save failed: \".concat(response.status));\n            case 8:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15);\n      }));\n      function saveToBackend(_x5) {\n        return _saveToBackend.apply(this, arguments);\n      }\n      return saveToBackend;\n    }()\n    /**\r\n     * Apply wallpaper with smooth transition\r\n     */\n  }, {\n    key: \"applyWallpaperWithTransition\",\n    value: function applyWallpaperWithTransition(imageUrl) {\n      if (!this.wallpaperContainer) return;\n\n      // Add smooth fade transition\n      this.wallpaperContainer.style.transition = 'background-image 0.8s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1)';\n\n      // Apply new wallpaper\n      this.wallpaperContainer.style.backgroundImage = \"url('\".concat(imageUrl, \"')\");\n      this.wallpaperContainer.style.backgroundSize = 'cover';\n      this.wallpaperContainer.style.backgroundPosition = 'center';\n      this.wallpaperContainer.style.backgroundRepeat = 'no-repeat';\n      this.wallpaperContainer.style.opacity = '1';\n\n      // Also set on body for immediate visibility\n      document.body.style.transition = 'background-image 0.8s cubic-bezier(0.4, 0, 0.2, 1)';\n      document.body.style.backgroundImage = \"url('\".concat(imageUrl, \"')\");\n      document.body.style.backgroundSize = 'cover';\n      document.body.style.backgroundPosition = 'center';\n      document.body.style.backgroundRepeat = 'no-repeat';\n      console.log('Wallpaper applied with smooth transition');\n    }\n\n    /**\r\n     * Handle window resize\r\n     */\n  }, {\n    key: \"onWindowResize\",\n    value: function onWindowResize() {\n      // Update desktop dimensions and icon positions\n      if (this.iconsContainer) {\n        this.repositionIcons();\n      }\n\n      // Update wallpaper if needed\n      if (this.wallpaperContainer) {\n        this.wallpaperContainer.style.width = '100%';\n        this.wallpaperContainer.style.height = '100%';\n      }\n    }\n\n    /**\r\n     * Handle before unload\r\n     */\n  }, {\n    key: \"onBeforeUnload\",\n    value: function onBeforeUnload() {\n      // Save current state before page unload\n      var sessionData = {\n        timestamp: Date.now(),\n        wallpaper: this.currentWallpaper,\n        preferences: this.preferences\n      };\n      localStorage.setItem('desktop_session', JSON.stringify(sessionData));\n    }\n\n    /**\r\n     * Handle desktop context menu\r\n     */\n  }, {\n    key: \"onContextMenu\",\n    value: function onContextMenu(event) {\n      var _this4 = this;\n      event.preventDefault();\n      if (!this.contextMenu) return;\n\n      // Position context menu at cursor\n      this.contextMenu.style.left = event.clientX + 'px';\n      this.contextMenu.style.top = event.clientY + 'px';\n      this.contextMenu.style.display = 'block';\n\n      // Close on next click\n      setTimeout(function () {\n        document.addEventListener('click', function () {\n          _this4.contextMenu.style.display = 'none';\n        }, {\n          once: true\n        });\n      }, 0);\n    }\n\n    /**\r\n     * Handle desktop click\r\n     */\n  }, {\n    key: \"onDesktopClick\",\n    value: function onDesktopClick(event) {\n      // Hide context menu if clicking on empty space\n      if (this.contextMenu && event.target === this.container) {\n        this.contextMenu.style.display = 'none';\n      }\n\n      // Deselect any selected icons\n      var selectedIcons = this.container.querySelectorAll('.desktop-icon.selected');\n      selectedIcons.forEach(function (icon) {\n        return icon.classList.remove('selected');\n      });\n    }\n\n    /**\r\n     * Handle context menu clicks\r\n     */\n  }, {\n    key: \"onContextMenuClick\",\n    value: function onContextMenuClick(event) {\n      event.stopPropagation();\n      var action = event.target.dataset.action;\n      if (!action) return;\n      switch (action) {\n        case 'change_wallpaper':\n          this.openWallpaperSelector();\n          break;\n        case 'view_options':\n          this.openViewOptions();\n          break;\n        case 'get_info':\n          this.showDesktopInfo();\n          break;\n      }\n      this.contextMenu.style.display = 'none';\n    }\n\n    /**\r\n     * Setup performance monitoring\r\n     */\n  }, {\n    key: \"setupPerformanceMonitoring\",\n    value: function setupPerformanceMonitoring() {\n      var _this5 = this;\n      var frameCount = 0;\n      var lastTime = performance.now();\n      var measureFPS = function measureFPS() {\n        frameCount++;\n        var currentTime = performance.now();\n        if (currentTime - lastTime >= 1000) {\n          var fps = Math.round(frameCount * 1000 / (currentTime - lastTime));\n\n          // Adjust performance mode if FPS drops\n          if (fps < 30 && _this5.config.performanceMode !== 'low') {\n            _this5.config.performanceMode = 'low';\n            console.warn('Performance mode switched to low due to low FPS:', fps);\n          }\n          frameCount = 0;\n          lastTime = currentTime;\n        }\n        requestAnimationFrame(measureFPS);\n      };\n      requestAnimationFrame(measureFPS);\n    }\n\n    /**\r\n     * Utility Methods\r\n     */\n\n    /**\r\n     * Reposition desktop icons after resize\r\n     */\n  }, {\n    key: \"repositionIcons\",\n    value:\n    /**\r\n     * Reposition icons after window resize\r\n     */\n    function repositionIcons() {\n      if (!this.iconsContainer) return;\n      var containerRect = this.iconsContainer.getBoundingClientRect();\n      var icons = this.iconsContainer.querySelectorAll('.desktop-icon');\n      icons.forEach(function (iconElement) {\n        var rect = iconElement.getBoundingClientRect();\n\n        // Keep icons within bounds\n        var x = parseInt(iconElement.style.left);\n        var y = parseInt(iconElement.style.top);\n        if (x + 64 > containerRect.width) {\n          x = containerRect.width - 64 - 20;\n        }\n        if (y + 64 > containerRect.height) {\n          y = containerRect.height - 64 - 20;\n        }\n        iconElement.style.left = Math.max(20, x) + 'px';\n        iconElement.style.top = Math.max(20, y) + 'px';\n      });\n    }\n\n    /**\r\n     * Handle error conditions\r\n     */\n  }, {\n    key: \"openWallpaperSelector\",\n    value:\n    /**\r\n     * Open wallpaper selector modal\r\n     */\n    function openWallpaperSelector() {\n      var _this6 = this;\n      console.log('Opening wallpaper selector');\n\n      // Create modal overlay\n      var modal = document.createElement('div');\n      modal.className = 'wallpaper-selector-modal';\n      modal.style.cssText = \"\\n            position: fixed;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n            background: rgba(0, 0, 0, 0.5);\\n            backdrop-filter: blur(20px);\\n            z-index: 10000;\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            opacity: 0;\\n            transition: opacity 300ms ease;\\n        \";\n\n      // Create selector panel\n      var panel = document.createElement('div');\n      panel.className = 'wallpaper-panel';\n      panel.style.cssText = \"\\n            background: rgba(255, 255, 255, 0.9);\\n            border-radius: 12px;\\n            padding: 20px;\\n            max-width: 800px;\\n            max-height: 600px;\\n            overflow-y: auto;\\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\\n            transform: scale(0.9);\\n            transition: transform 300ms ease;\\n        \";\n\n      // Create header\n      var header = document.createElement('div');\n      header.innerHTML = \"\\n            <div style=\\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\\\">\\n                <h3 style=\\\"margin: 0; font-size: 18px; color: #1d1d1f;\\\">Choose a Wallpaper</h3>\\n                <button class=\\\"close-btn\\\" style=\\\"\\n                    background: #ff5f57;\\n                    border: none;\\n                    border-radius: 50%;\\n                    width: 20px;\\n                    height: 20px;\\n                    cursor: pointer;\\n                \\\">\\u2715</button>\\n            </div>\\n        \";\n\n      // Create wallpaper grid\n      var grid = document.createElement('div');\n      grid.className = 'wallpaper-grid';\n      grid.style.cssText = \"\\n            display: grid;\\n            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\\n            gap: 12px;\\n        \";\n\n      // Add wallpapers to grid\n      this.wallpapers.forEach(function (wallpaper) {\n        var _this6$currentWallpap;\n        var item = document.createElement('div');\n        item.className = 'wallpaper-item';\n        item.style.cssText = \"\\n                aspect-ratio: 16/10;\\n                border-radius: 8px;\\n                overflow: hidden;\\n                cursor: pointer;\\n                border: 3px solid \".concat(wallpaper.id === ((_this6$currentWallpap = _this6.currentWallpaper) === null || _this6$currentWallpap === void 0 ? void 0 : _this6$currentWallpap.id) ? '#007aff' : 'transparent', \";\\n                transition: all 200ms ease;\\n                background-image: url(\").concat(wallpaper.thumbnail || wallpaper.fullImage, \");\\n                background-size: cover;\\n                background-position: center;\\n                position: relative;\\n            \");\n\n        // Add hover effect\n        item.addEventListener('mouseenter', function () {\n          var _this6$currentWallpap2;\n          if (wallpaper.id !== ((_this6$currentWallpap2 = _this6.currentWallpaper) === null || _this6$currentWallpap2 === void 0 ? void 0 : _this6$currentWallpap2.id)) {\n            item.style.transform = 'scale(1.05)';\n            item.style.boxShadow = '0 8px 20px rgba(0, 0, 0, 0.3)';\n          }\n        });\n        item.addEventListener('mouseleave', function () {\n          item.style.transform = 'scale(1)';\n          item.style.boxShadow = 'none';\n        });\n\n        // Add wallpaper name overlay\n        var nameOverlay = document.createElement('div');\n        nameOverlay.style.cssText = \"\\n                position: absolute;\\n                bottom: 0;\\n                left: 0;\\n                right: 0;\\n                background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));\\n                color: white;\\n                padding: 8px;\\n                font-size: 12px;\\n                text-align: center;\\n            \";\n        nameOverlay.textContent = wallpaper.name || wallpaper.id;\n        item.appendChild(nameOverlay);\n\n        // Handle wallpaper selection\n        item.addEventListener('click', /*#__PURE__*/(0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee16() {\n          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee16$(_context16) {\n            while (1) switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.prev = 0;\n                _context16.next = 3;\n                return _this6.changeWallpaper(wallpaper);\n              case 3:\n                // Update selection visual\n                grid.querySelectorAll('.wallpaper-item').forEach(function (el) {\n                  el.style.border = '3px solid transparent';\n                });\n                item.style.border = '3px solid #007aff';\n\n                // Close modal after short delay\n                setTimeout(function () {\n                  modal.click();\n                }, 500);\n                _context16.next = 11;\n                break;\n              case 8:\n                _context16.prev = 8;\n                _context16.t0 = _context16[\"catch\"](0);\n                console.error('Failed to select wallpaper:', _context16.t0);\n              case 11:\n              case \"end\":\n                return _context16.stop();\n            }\n          }, _callee16, null, [[0, 8]]);\n        })));\n        grid.appendChild(item);\n      });\n\n      // Assemble modal\n      panel.appendChild(header);\n      panel.appendChild(grid);\n      modal.appendChild(panel);\n      document.body.appendChild(modal);\n\n      // Handle close button\n      var closeBtn = panel.querySelector('.close-btn');\n      closeBtn.addEventListener('click', function () {\n        return modal.click();\n      });\n\n      // Handle modal close\n      modal.addEventListener('click', function (e) {\n        if (e.target === modal) {\n          modal.style.opacity = '0';\n          panel.style.transform = 'scale(0.9)';\n          setTimeout(function () {\n            if (modal.parentNode) {\n              modal.parentNode.removeChild(modal);\n            }\n          }, 300);\n        }\n      });\n\n      // Animate in\n      requestAnimationFrame(function () {\n        modal.style.opacity = '1';\n        panel.style.transform = 'scale(1)';\n      });\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('wallpaper:selector:opened');\n    }\n\n    /**\r\n     * Open view options (placeholder for future implementation)\r\n     */\n  }, {\n    key: \"openViewOptions\",\n    value: function openViewOptions() {\n      console.log('Opening view options (not implemented yet)');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('desktop:options:open');\n    }\n\n    /**\r\n     * Show desktop info (placeholder for future implementation)\r\n     */\n  }, {\n    key: \"showDesktopInfo\",\n    value: function showDesktopInfo() {\n      console.log('Showing desktop info (not implemented yet)');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('desktop:info:show');\n    }\n\n    /**\r\n     * Load image with promise\r\n     */\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(src) {\n      return new Promise(function (resolve, reject) {\n        var img = new Image();\n        img.onload = function () {\n          return resolve(img);\n        };\n        img.onerror = reject;\n        img.src = src;\n      });\n    }\n\n    /**\r\n     * Delay utility\r\n     */\n  }, {\n    key: \"delay\",\n    value: function delay(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n\n    /**\r\n     * Animation utility\r\n     */\n  }, {\n    key: \"animate\",\n    value: function animate(element, keyframes, options) {\n      if (this.config.performanceMode === 'low') {\n        return Promise.resolve();\n      }\n      return element.animate(keyframes, options).finished;\n    }\n\n    /**\r\n     * Get progress text based on percentage\r\n     */\n  }, {\n    key: \"getProgressText\",\n    value: function getProgressText(percentage) {\n      if (percentage < 20) return 'Starting up...';\n      if (percentage < 40) return 'Loading components...';\n      if (percentage < 60) return 'Initializing systems...';\n      if (percentage < 80) return 'Preparing desktop...';\n      return 'Almost ready...';\n    }\n\n    /**\r\n     * Get default boot messages\r\n     */\n  }, {\n    key: \"getDefaultBootMessages\",\n    value: function getDefaultBootMessages() {\n      return ['Initializing AbdulmeLink Portfolio...', 'Loading LinkOS interface...', 'Configuring EventBus system...', 'Loading wallpapers and assets...', 'Setting up desktop environment...', 'Starting services...', 'Almost ready...'];\n    }\n\n    /**\r\n     * Detect device performance mode\r\n     */\n  }, {\n    key: \"detectPerformanceMode\",\n    value: function detectPerformanceMode() {\n      var isMobile = /Mobi|Android/i.test(navigator.userAgent);\n      var cores = navigator.hardwareConcurrency || 2;\n      var memory = navigator.deviceMemory || 2;\n      var isLowEnd = cores < 4 || memory < 4;\n      if (isMobile || isLowEnd) return 'mobile';\n      if (cores >= 8 && memory >= 8) return 'high';\n      return 'auto';\n    }\n\n    /**\r\n     * Get default preferences\r\n     */\n  }, {\n    key: \"getDefaultPreferences\",\n    value: function getDefaultPreferences() {\n      return {\n        appearance: {\n          theme: 'auto',\n          transparency: 0.9\n        },\n        desktop: {\n          wallpaper: null,\n          autoRotate: true,\n          showLabels: true\n        },\n        performance: {\n          animations: true,\n          effects: true,\n          quality: 'auto'\n        }\n      };\n    }\n\n    /**\r\n     * Get default wallpapers\r\n     */\n  }, {\n    key: \"getDefaultWallpapers\",\n    value: function getDefaultWallpapers() {\n      return [{\n        id: 'default-1',\n        name: 'LinkOS Big Sur',\n        url: '/images/wallpapers/big-sur.jpg',\n        thumbnail: '/images/wallpapers/thumbs/big-sur.jpg',\n        type: 'light'\n      }, {\n        id: 'default-2',\n        name: 'LinkOS Monterey',\n        url: '/images/wallpapers/monterey.jpg',\n        thumbnail: '/images/wallpapers/thumbs/monterey.jpg',\n        type: 'dark'\n      }];\n    }\n\n    /**\r\n     * Get default session data\r\n     */\n  }, {\n    key: \"getDefaultSessionData\",\n    value: function getDefaultSessionData() {\n      return {\n        timestamp: Date.now(),\n        firstVisit: true,\n        bootCount: 1\n      };\n    }\n\n    /**\r\n     * Get default desktop applications\r\n     */\n  }, {\n    key: \"getDefaultApps\",\n    value: function getDefaultApps() {\n      return [{\n        id: 'portfolio',\n        name: 'Portfolio',\n        icon: '/images/icons/portfolio.png',\n        type: 'internal',\n        component: 'Portfolio',\n        position: {\n          x: 60,\n          y: 60\n        },\n        featured: true\n      }, {\n        id: 'terminal',\n        name: 'Terminal',\n        icon: '/images/icons/terminal.png',\n        type: 'internal',\n        component: 'Terminal',\n        position: {\n          x: 180,\n          y: 60\n        },\n        featured: true\n      }, {\n        id: 'about',\n        name: 'About Me',\n        icon: '/images/icons/about.png',\n        type: 'internal',\n        component: 'About',\n        position: {\n          x: 300,\n          y: 60\n        },\n        featured: true\n      }, {\n        id: 'contact',\n        name: 'Contact',\n        icon: '/images/icons/contact.png',\n        type: 'internal',\n        component: 'Contact',\n        position: {\n          x: 420,\n          y: 60\n        },\n        featured: true\n      }];\n    }\n\n    /**\r\n     * Create desktop icons for all apps\r\n     */\n  }, {\n    key: \"createDesktopIcons\",\n    value: function createDesktopIcons() {\n      var _this$preferences$des,\n        _this7 = this;\n      if (!this.iconsContainer) return;\n\n      // Clear existing icons\n      this.iconsContainer.innerHTML = '';\n\n      // Get apps to show (featured by default unless preferences say otherwise)\n      var showAllApps = ((_this$preferences$des = this.preferences.desktop) === null || _this$preferences$des === void 0 ? void 0 : _this$preferences$des.showAllApps) !== false;\n      var appsToShow = showAllApps ? this.desktopApps : this.desktopApps.filter(function (app) {\n        return app.featured;\n      });\n      appsToShow.forEach(function (app) {\n        _this7.createDesktopIcon(app);\n      });\n      console.log(\"Created \".concat(appsToShow.length, \" desktop icons\"));\n    }\n\n    /**\r\n     * Create individual desktop icon\r\n     */\n  }, {\n    key: \"createDesktopIcon\",\n    value: function createDesktopIcon(app) {\n      var _this$preferences$des2;\n      var icon = document.createElement('div');\n      icon.className = 'desktop-icon';\n      icon.dataset.appId = app.id;\n      icon.dataset.appType = app.type;\n\n      // Set initial position\n      icon.style.cssText = \"\\n            position: absolute;\\n            left: \".concat(app.position.x, \"px;\\n            top: \").concat(app.position.y, \"px;\\n            width: 64px;\\n            height: 64px;\\n            cursor: pointer;\\n            user-select: none;\\n            transform-origin: center;\\n            transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\\n            display: flex;\\n            flex-direction: column;\\n            align-items: center;\\n            gap: 4px;\\n        \");\n\n      // Create icon image\n      var iconImg = document.createElement('div');\n      iconImg.className = 'icon-image';\n      iconImg.style.cssText = \"\\n            width: 64px;\\n            height: 64px;\\n            background-image: url(\".concat(app.icon, \");\\n            background-size: cover;\\n            background-position: center;\\n            border-radius: 12px;\\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\\n            transition: all 200ms ease;\\n        \");\n\n      // Create icon label\n      var showLabels = ((_this$preferences$des2 = this.preferences.desktop) === null || _this$preferences$des2 === void 0 ? void 0 : _this$preferences$des2.showIconLabels) !== false;\n      var iconLabel = null;\n      if (showLabels) {\n        iconLabel = document.createElement('div');\n        iconLabel.className = 'icon-label';\n        iconLabel.textContent = app.name;\n        iconLabel.style.cssText = \"\\n                color: white;\\n                font-size: 11px;\\n                font-weight: 500;\\n                text-align: center;\\n                text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);\\n                max-width: 80px;\\n                line-height: 1.2;\\n                word-wrap: break-word;\\n            \";\n      }\n\n      // Assemble icon\n      icon.appendChild(iconImg);\n      if (iconLabel) {\n        icon.appendChild(iconLabel);\n      }\n\n      // Add event listeners\n      this.addIconEventListeners(icon, app);\n\n      // Add to container\n      this.iconsContainer.appendChild(icon);\n    }\n\n    /**\r\n     * Add event listeners to desktop icon\r\n     */\n  }, {\n    key: \"addIconEventListeners\",\n    value: function addIconEventListeners(iconElement, app) {\n      var _this8 = this;\n      var iconImg = iconElement.querySelector('.icon-image');\n      var isDragging = false;\n      var dragStartPos = {\n        x: 0,\n        y: 0\n      };\n      var iconStartPos = {\n        x: 0,\n        y: 0\n      };\n\n      // Hover effects\n      iconElement.addEventListener('mouseenter', function () {\n        if (!isDragging) {\n          iconImg.style.transform = 'scale(1.1) rotate(5deg)';\n          iconImg.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.4)';\n        }\n      });\n      iconElement.addEventListener('mouseleave', function () {\n        if (!isDragging) {\n          iconImg.style.transform = 'scale(1) rotate(0deg)';\n          iconImg.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';\n        }\n      });\n\n      // Double-click to open app\n      iconElement.addEventListener('dblclick', function (e) {\n        e.preventDefault();\n        _this8.openApp(app);\n      });\n\n      // Drag functionality\n      iconElement.addEventListener('mousedown', function (e) {\n        if (e.button !== 0) return; // Only left mouse button\n\n        isDragging = true;\n        iconElement.style.opacity = '0.8';\n        iconElement.style.zIndex = '9999';\n        dragStartPos = {\n          x: e.clientX,\n          y: e.clientY\n        };\n        var rect = iconElement.getBoundingClientRect();\n        iconStartPos = {\n          x: rect.left,\n          y: rect.top\n        };\n        e.preventDefault();\n      });\n\n      // Global mouse move for dragging\n      document.addEventListener('mousemove', function (e) {\n        if (!isDragging) return;\n        var deltaX = e.clientX - dragStartPos.x;\n        var deltaY = e.clientY - dragStartPos.y;\n        var newX = iconStartPos.x + deltaX;\n        var newY = iconStartPos.y + deltaY;\n        iconElement.style.left = newX + 'px';\n        iconElement.style.top = newY + 'px';\n      });\n\n      // Global mouse up to end dragging\n      document.addEventListener('mouseup', function (e) {\n        if (!isDragging) return;\n        isDragging = false;\n        iconElement.style.opacity = '1';\n        iconElement.style.zIndex = 'auto';\n\n        // Snap to grid\n        var rect = iconElement.getBoundingClientRect();\n        var snappedPos = _this8.snapToGrid({\n          x: rect.left,\n          y: rect.top\n        });\n        iconElement.style.left = snappedPos.x + 'px';\n        iconElement.style.top = snappedPos.y + 'px';\n\n        // Update app position\n        app.position = snappedPos;\n\n        // Save positions\n        _this8.saveIconPositions();\n\n        // Reset hover effects\n        iconImg.style.transform = 'scale(1) rotate(0deg)';\n        iconImg.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';\n      });\n    }\n\n    /**\r\n     * Snap position to grid\r\n     */\n  }, {\n    key: \"snapToGrid\",\n    value: function snapToGrid(position) {\n      var gridSize = this.config.iconGridSize;\n      var snapThreshold = 15;\n      var snappedX = Math.round(position.x / gridSize) * gridSize;\n      var snappedY = Math.round(position.y / gridSize) * gridSize;\n\n      // Only snap if close enough\n      var deltaX = Math.abs(position.x - snappedX);\n      var deltaY = Math.abs(position.y - snappedY);\n      return {\n        x: deltaX < snapThreshold ? snappedX : position.x,\n        y: deltaY < snapThreshold ? snappedY : position.y\n      };\n    }\n\n    /**\r\n     * Open desktop application\r\n     */\n  }, {\n    key: \"openApp\",\n    value: function openApp(app) {\n      console.log('Opening app:', app.name);\n      if (app.type === 'external') {\n        // Open external URL in new tab\n        window.open(app.url, '_blank');\n      } else {\n        // Open internal component via EventBus\n        _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('app:launch', {\n          appId: app.id,\n          component: app.component,\n          name: app.name,\n          config: {\n            title: app.name,\n            size: app.size || {\n              width: 800,\n              height: 600\n            }\n          }\n        });\n      }\n\n      // Add to recent apps\n      this.addToRecentApps(app);\n    }\n\n    /**\r\n     * Add app to recent apps list\r\n     */\n  }, {\n    key: \"addToRecentApps\",\n    value: function addToRecentApps(app) {\n      if (!this.sessionData.recentApps) {\n        this.sessionData.recentApps = [];\n      }\n\n      // Remove if already exists\n      this.sessionData.recentApps = this.sessionData.recentApps.filter(function (recent) {\n        return recent.id !== app.id;\n      });\n\n      // Add to beginning\n      this.sessionData.recentApps.unshift({\n        id: app.id,\n        name: app.name,\n        timestamp: Date.now()\n      });\n\n      // Keep only last 10\n      this.sessionData.recentApps = this.sessionData.recentApps.slice(0, 10);\n\n      // Save session data\n      this.saveCurrentState();\n    }\n\n    /**\r\n     * Save desktop icon positions\r\n     */\n  }, {\n    key: \"saveIconPositions\",\n    value: function saveIconPositions() {\n      var positions = {};\n      var icons = this.iconsContainer.querySelectorAll('.desktop-icon');\n      icons.forEach(function (iconElement) {\n        var appId = iconElement.dataset.appId;\n        var rect = iconElement.getBoundingClientRect();\n        positions[appId] = {\n          x: parseInt(iconElement.style.left),\n          y: parseInt(iconElement.style.top)\n        };\n      });\n      localStorage.setItem('desktop_icon_positions', JSON.stringify(positions));\n    }\n\n    /**\r\n     * Load saved icon positions\r\n     */\n  }, {\n    key: \"loadIconPositions\",\n    value: function loadIconPositions() {\n      try {\n        var saved = localStorage.getItem('desktop_icon_positions');\n        if (saved) {\n          var positions = JSON.parse(saved);\n\n          // Update app positions\n          this.desktopApps.forEach(function (app) {\n            if (positions[app.id]) {\n              app.position = positions[app.id];\n            }\n          });\n        }\n      } catch (error) {\n        console.warn('Failed to load icon positions:', error);\n      }\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      console.error('Desktop error:', error);\n\n      // Hide boot overlay if it's showing\n      if (this.bootOverlay && this.isBooting) {\n        this.bootOverlay.style.display = 'none';\n        this.isBooting = false;\n      }\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('desktop:error', {\n        error: error.message\n      });\n    }\n\n    /**\r\n     * Progressive wallpaper loading - Load image with caching and transition\r\n     */\n  }, {\n    key: \"loadWallpaperImage\",\n    value: function () {\n      var _loadWallpaperImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee17(imageUrl) {\n        var _this9 = this;\n        var isThumbnail,\n          _args17 = arguments;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              isThumbnail = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : false;\n              return _context17.abrupt(\"return\", new Promise(function (resolve, reject) {\n                // Check cache first\n                if (_this9.wallpaperCache.has(imageUrl)) {\n                  _this9.applyWallpaperImage(imageUrl);\n                  resolve();\n                  return;\n                }\n                var img = new Image();\n                img.onload = function () {\n                  // Cache the loaded image\n                  _this9.wallpaperCache.set(imageUrl, img);\n\n                  // Apply with smooth transition\n                  _this9.applyWallpaperImage(imageUrl, isThumbnail);\n                  resolve();\n                };\n                img.onerror = function () {\n                  console.error('Failed to load wallpaper image:', imageUrl);\n                  reject(new Error(\"Failed to load \".concat(isThumbnail ? 'thumbnail' : 'wallpaper', \": \").concat(imageUrl)));\n                };\n                img.src = imageUrl;\n              }));\n            case 2:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17);\n      }));\n      function loadWallpaperImage(_x6) {\n        return _loadWallpaperImage.apply(this, arguments);\n      }\n      return loadWallpaperImage;\n    }()\n    /**\r\n     * Apply wallpaper image with smooth crossfade transition\r\n     */\n  }, {\n    key: \"applyWallpaperImage\",\n    value: function applyWallpaperImage(imageUrl) {\n      var _this10 = this;\n      var isThumbnail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!this.wallpaperContainer) return;\n      var duration = this.config.wallpaperTransitionDuration;\n\n      // Create temporary container for crossfade effect\n      if (!isThumbnail && this.wallpaperContainer.style.backgroundImage) {\n        var tempContainer = this.wallpaperContainer.cloneNode(false);\n        tempContainer.style.opacity = '0';\n        tempContainer.style.backgroundImage = \"url(\".concat(imageUrl, \")\");\n        tempContainer.style.transition = \"opacity \".concat(duration, \"ms ease-in-out\");\n        this.wallpaperContainer.parentNode.appendChild(tempContainer);\n\n        // Trigger transition\n        requestAnimationFrame(function () {\n          tempContainer.style.opacity = '1';\n          _this10.wallpaperContainer.style.opacity = '0';\n          setTimeout(function () {\n            _this10.wallpaperContainer.style.backgroundImage = \"url(\".concat(imageUrl, \")\");\n            _this10.wallpaperContainer.style.opacity = '1';\n            _this10.wallpaperContainer.style.transition = '';\n            tempContainer.remove();\n          }, duration);\n        });\n      } else {\n        // Direct application for thumbnails or first load\n        this.wallpaperContainer.style.backgroundImage = \"url(\".concat(imageUrl, \")\");\n      }\n    }\n\n    /**\r\n     * Preload wallpaper thumbnails for faster switching\r\n     */\n  }, {\n    key: \"preloadWallpaperThumbnails\",\n    value: function () {\n      var _preloadWallpaperThumbnails = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee18() {\n        var _this11 = this;\n        var preloadPromises;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!(!this.wallpapers || this.wallpapers.length === 0)) {\n                _context18.next = 2;\n                break;\n              }\n              return _context18.abrupt(\"return\");\n            case 2:\n              console.log('Preloading wallpaper thumbnails...');\n              preloadPromises = this.wallpapers.filter(function (wallpaper) {\n                return wallpaper.thumbnail;\n              }).slice(0, 10) // Limit to first 10 to avoid overwhelming bandwidth\n              .map(function (wallpaper) {\n                return new Promise(function (resolve) {\n                  var img = new Image();\n                  img.onload = function () {\n                    _this11.wallpaperCache.set(wallpaper.thumbnail, img);\n                    resolve();\n                  };\n                  img.onerror = function () {\n                    return resolve();\n                  }; // Don't fail the whole preload\n                  img.src = wallpaper.thumbnail;\n                });\n              });\n              _context18.next = 6;\n              return Promise.all(preloadPromises);\n            case 6:\n              console.log('Thumbnails preloaded successfully');\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function preloadWallpaperThumbnails() {\n        return _preloadWallpaperThumbnails.apply(this, arguments);\n      }\n      return preloadWallpaperThumbnails;\n    }()\n    /**\r\n     * Setup automatic wallpaper rotation timer\r\n     */\n  }, {\n    key: \"setupWallpaperRotation\",\n    value: function setupWallpaperRotation() {\n      var _this$preferences$des3,\n        _this12 = this;\n      // Clear existing timer\n      if (this.rotationTimer) {\n        clearInterval(this.rotationTimer);\n      }\n\n      // Check if auto-rotation is enabled in preferences\n      var rotationEnabled = ((_this$preferences$des3 = this.preferences.desktop) === null || _this$preferences$des3 === void 0 ? void 0 : _this$preferences$des3.autoRotation) !== false;\n      if (rotationEnabled && this.wallpapers.length > 1) {\n        this.rotationTimer = setInterval(function () {\n          _this12.rotateToNextWallpaper();\n        }, this.config.rotationInterval);\n        console.log(\"Auto-rotation enabled: every \".concat(this.config.rotationInterval / 60000, \" minutes\"));\n      }\n    }\n\n    /**\r\n     * Rotate to next wallpaper based on time or random selection\r\n     */\n  }, {\n    key: \"rotateToNextWallpaper\",\n    value: function () {\n      var _rotateToNextWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee19() {\n        var _this13 = this;\n        var _this$currentWallpape, timeBasedWallpaper, availableWallpapers, randomIndex, nextWallpaper;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.prev = 0;\n              _context19.next = 3;\n              return this.getTimeBasedWallpaper();\n            case 3:\n              timeBasedWallpaper = _context19.sent;\n              if (!(timeBasedWallpaper && timeBasedWallpaper.id !== ((_this$currentWallpape = this.currentWallpaper) === null || _this$currentWallpape === void 0 ? void 0 : _this$currentWallpape.id))) {\n                _context19.next = 8;\n                break;\n              }\n              _context19.next = 7;\n              return this.changeWallpaper(timeBasedWallpaper);\n            case 7:\n              return _context19.abrupt(\"return\");\n            case 8:\n              if (!(this.wallpapers.length > 1)) {\n                _context19.next = 15;\n                break;\n              }\n              availableWallpapers = this.wallpapers.filter(function (w) {\n                var _this13$currentWallpa;\n                return w.id !== ((_this13$currentWallpa = _this13.currentWallpaper) === null || _this13$currentWallpa === void 0 ? void 0 : _this13$currentWallpa.id);\n              });\n              if (!(availableWallpapers.length > 0)) {\n                _context19.next = 15;\n                break;\n              }\n              randomIndex = Math.floor(Math.random() * availableWallpapers.length);\n              nextWallpaper = availableWallpapers[randomIndex];\n              _context19.next = 15;\n              return this.changeWallpaper(nextWallpaper);\n            case 15:\n              _context19.next = 20;\n              break;\n            case 17:\n              _context19.prev = 17;\n              _context19.t0 = _context19[\"catch\"](0);\n              console.error('Failed to rotate wallpaper:', _context19.t0);\n            case 20:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[0, 17]]);\n      }));\n      function rotateToNextWallpaper() {\n        return _rotateToNextWallpaper.apply(this, arguments);\n      }\n      return rotateToNextWallpaper;\n    }()\n    /**\r\n     * Load time-based wallpaper from API\r\n     */\n  }, {\n    key: \"loadTimeBasedWallpaper\",\n    value: function () {\n      var _loadTimeBasedWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee20() {\n        var _this$sessionData2, hasSavedWallpaper, wallpaper;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.prev = 0;\n              // Don't override user's saved wallpaper preference\n              hasSavedWallpaper = localStorage.getItem('current_wallpaper') || ((_this$sessionData2 = this.sessionData) === null || _this$sessionData2 === void 0 ? void 0 : _this$sessionData2.wallpaper);\n              if (!hasSavedWallpaper) {\n                _context20.next = 5;\n                break;\n              }\n              console.log('User has saved wallpaper preference, skipping time-based loading');\n              return _context20.abrupt(\"return\");\n            case 5:\n              console.log('Loading time-based wallpaper...');\n              _context20.next = 8;\n              return this.getTimeBasedWallpaper();\n            case 8:\n              wallpaper = _context20.sent;\n              if (!wallpaper) {\n                _context20.next = 12;\n                break;\n              }\n              _context20.next = 12;\n              return this.changeWallpaper(wallpaper);\n            case 12:\n              _context20.next = 17;\n              break;\n            case 14:\n              _context20.prev = 14;\n              _context20.t0 = _context20[\"catch\"](0);\n              console.warn('Failed to load time-based wallpaper:', _context20.t0);\n            case 17:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this, [[0, 14]]);\n      }));\n      function loadTimeBasedWallpaper() {\n        return _loadTimeBasedWallpaper.apply(this, arguments);\n      }\n      return loadTimeBasedWallpaper;\n    }()\n    /**\r\n     * Get time-appropriate wallpaper\r\n     */\n  }, {\n    key: \"getTimeBasedWallpaper\",\n    value: function () {\n      var _getTimeBasedWallpaper = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee21() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.prev = 0;\n              _context21.next = 3;\n              return fetch('/api/wallpapers/time-based');\n            case 3:\n              response = _context21.sent;\n              _context21.next = 6;\n              return response.json();\n            case 6:\n              data = _context21.sent;\n              if (!(data.success && data.data.length > 0)) {\n                _context21.next = 9;\n                break;\n              }\n              return _context21.abrupt(\"return\", data.data[0]);\n            case 9:\n              return _context21.abrupt(\"return\", null);\n            case 12:\n              _context21.prev = 12;\n              _context21.t0 = _context21[\"catch\"](0);\n              console.error('Failed to get time-based wallpaper:', _context21.t0);\n              return _context21.abrupt(\"return\", null);\n            case 16:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, null, [[0, 12]]);\n      }));\n      function getTimeBasedWallpaper() {\n        return _getTimeBasedWallpaper.apply(this, arguments);\n      }\n      return getTimeBasedWallpaper;\n    }()\n    /**\r\n     * Load fallback wallpaper on errors\r\n     */\n  }, {\n    key: \"loadFallbackWallpaper\",\n    value: function loadFallbackWallpaper() {\n      var fallback = {\n        id: 'fallback',\n        name: 'Default',\n        fullImage: '/images/wallpapers/default.jpg',\n        thumbnail: '/images/wallpapers/default.jpg'\n      };\n\n      // Simple fallback without progressive loading\n      this.wallpaperContainer.style.backgroundImage = \"url(\".concat(fallback.fullImage, \")\");\n      this.currentWallpaper = fallback;\n    }\n\n    /**\r\n     * Save current desktop state\r\n     */\n  }, {\n    key: \"saveCurrentState\",\n    value: function saveCurrentState() {\n      var _this$sessionData3;\n      var sessionData = {\n        timestamp: Date.now(),\n        wallpaper: this.currentWallpaper,\n        preferences: this.preferences,\n        bootCount: ((_this$sessionData3 = this.sessionData) === null || _this$sessionData3 === void 0 ? void 0 : _this$sessionData3.bootCount) || 0\n      };\n      try {\n        var _this$currentWallpape2, _this$currentWallpape3;\n        localStorage.setItem('desktop_session', JSON.stringify(sessionData));\n        // Update the local sessionData object so it's immediately available\n        this.sessionData = sessionData;\n        console.log('Desktop state saved with wallpaper:', ((_this$currentWallpape2 = this.currentWallpaper) === null || _this$currentWallpape2 === void 0 ? void 0 : _this$currentWallpape2.name) || ((_this$currentWallpape3 = this.currentWallpaper) === null || _this$currentWallpape3 === void 0 ? void 0 : _this$currentWallpape3.id));\n      } catch (error) {\n        console.warn('Failed to save desktop state:', error);\n      }\n    }\n\n    /**\r\n     * Clean up resources and timers\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Clear rotation timer\n      if (this.rotationTimer) {\n        clearInterval(this.rotationTimer);\n        this.rotationTimer = null;\n      }\n\n      // Clear wallpaper cache\n      this.wallpaperCache.clear();\n\n      // Remove event listeners\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].off('wallpaper:change', this.changeWallpaper.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].off('preferences:changed', this.onPreferencesChanged.bind(this));\n      console.log('Desktop component destroyed and cleaned up');\n    }\n\n    /**\r\n     * Get random default wallpaper for first-time users\r\n     * Uses deterministic randomization based on browser/session fingerprint\r\n     */\n  }, {\n    key: \"getRandomDefaultWallpaper\",\n    value: function getRandomDefaultWallpaper() {\n      try {\n        // Create a unique identifier for this browser/user\n        var fingerprint = this.generateUserFingerprint();\n\n        // Use fingerprint to deterministically select a wallpaper\n        var availableWallpapers = this.wallpapers.filter(function (w) {\n          return w.category === 'System' || w.category === 'Classic';\n        });\n        if (availableWallpapers.length === 0) {\n          return this.wallpapers[0] || null;\n        }\n\n        // Create deterministic random index from fingerprint\n        var hash = 0;\n        for (var i = 0; i < fingerprint.length; i++) {\n          var _char = fingerprint.charCodeAt(i);\n          hash = (hash << 5) - hash + _char;\n          hash = hash & hash; // Convert to 32-bit integer\n        }\n        var index = Math.abs(hash) % availableWallpapers.length;\n        var selectedWallpaper = availableWallpapers[index];\n        console.log(\"\\uD83C\\uDFB2 New user detected! Assigned random default wallpaper: \".concat(selectedWallpaper.name, \" (index \").concat(index, \"/\").concat(availableWallpapers.length, \")\"));\n        console.log(\"\\uD83D\\uDC64 User fingerprint: \".concat(fingerprint.substring(0, 8), \"...\"));\n        return selectedWallpaper;\n      } catch (error) {\n        console.error('Error generating random default wallpaper:', error);\n        return this.wallpapers[0] || null;\n      }\n    }\n\n    /**\r\n     * Generate a semi-unique fingerprint for this browser/user\r\n     * Combines various browser characteristics for deterministic randomization\r\n     */\n  }, {\n    key: \"generateUserFingerprint\",\n    value: function generateUserFingerprint() {\n      var components = [navigator.userAgent, navigator.language, screen.width + 'x' + screen.height, screen.colorDepth, new Date().getTimezoneOffset(), navigator.platform, navigator.cookieEnabled ? '1' : '0'];\n\n      // Add current date to make it change periodically (optional)\n      // components.push(new Date().toDateString());\n\n      return btoa(components.join('|')).replace(/[^a-zA-Z0-9]/g, '');\n    }\n\n    /**\r\n     * Check if this is a first-time user (no wallpaper preference saved)\r\n     */\n  }, {\n    key: \"isFirstTimeUser\",\n    value: function isFirstTimeUser() {\n      var _this$sessionData4, _this$preferences;\n      // Check for any existing wallpaper settings\n      var hasLocalStorageWallpaper = localStorage.getItem('current_wallpaper');\n      var hasSessionWallpaper = (_this$sessionData4 = this.sessionData) === null || _this$sessionData4 === void 0 ? void 0 : _this$sessionData4.wallpaper;\n      var hasPreferenceWallpaper = (_this$preferences = this.preferences) === null || _this$preferences === void 0 || (_this$preferences = _this$preferences.desktop) === null || _this$preferences === void 0 ? void 0 : _this$preferences.wallpaper;\n\n      // Check for first visit flag (set after first smart selection)\n      var hasVisitedBefore = localStorage.getItem('portfolio_visited');\n      var isFirstTime = !hasLocalStorageWallpaper && !hasSessionWallpaper && !hasPreferenceWallpaper && !hasVisitedBefore;\n\n      // Don't mark as visited here - let the backend handle this after wallpaper selection\n\n      return isFirstTime;\n    }\n\n    /**\r\n     * Debug helper: Test wallpaper persistence\r\n     */\n  }, {\n    key: \"testWallpaperPersistence\",\n    value: function testWallpaperPersistence() {\n      var _this$currentWallpape4;\n      console.log('=== WALLPAPER PERSISTENCE TEST ===');\n      console.log('Current wallpaper:', ((_this$currentWallpape4 = this.currentWallpaper) === null || _this$currentWallpape4 === void 0 ? void 0 : _this$currentWallpape4.name) || 'none');\n      console.log('Available wallpapers:', this.wallpapers.length);\n      console.log('Is first-time user:', this.isFirstTimeUser());\n      var saved = localStorage.getItem('current_wallpaper');\n      console.log('Saved in localStorage:', saved ? JSON.parse(saved) : 'none');\n      var session = localStorage.getItem('desktop_session');\n      console.log('Session data:', session ? JSON.parse(session) : 'none');\n      if (this.wallpapers.length > 0) {\n        console.log('Testing random assignment...');\n        var randomWallpaper = this.getRandomDefaultWallpaper();\n        console.log('Would assign:', (randomWallpaper === null || randomWallpaper === void 0 ? void 0 : randomWallpaper.name) || 'none');\n      }\n    }\n\n    /**\r\n     * Debug helper: Simulate new user (clear all saved data)\r\n     */\n  }, {\n    key: \"simulateNewUser\",\n    value: function simulateNewUser() {\n      console.log('🗑️ Clearing all user data to simulate new user...');\n      localStorage.removeItem('current_wallpaper');\n      localStorage.removeItem('desktop_session');\n      localStorage.removeItem('desktop_icon_positions');\n\n      // Reset session data\n      this.sessionData = null;\n      console.log('✅ User data cleared. Refresh the page to see new user experience.');\n      console.log('🔄 Or call: location.reload()');\n    }\n\n    /**\r\n     * Debug helper: Test random wallpaper assignment\r\n     */\n  }, {\n    key: \"testRandomAssignment\",\n    value: function testRandomAssignment() {\n      console.log('=== RANDOM WALLPAPER ASSIGNMENT TEST ===');\n      var fingerprint = this.generateUserFingerprint();\n      console.log('User fingerprint:', fingerprint.substring(0, 16) + '...');\n\n      // Test multiple times to show consistency\n      for (var i = 0; i < 5; i++) {\n        var randomWallpaper = this.getRandomDefaultWallpaper();\n        console.log(\"Test \".concat(i + 1, \": \").concat((randomWallpaper === null || randomWallpaper === void 0 ? void 0 : randomWallpaper.name) || 'none'));\n      }\n      console.log('☝️ Should be the same wallpaper every time (deterministic)');\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Desktop);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3272\n");

/***/ }),

/***/ 7813:
/*!***********************************************!*\
  !*** ./resources/js/components/LinkOS/Dock.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 4467);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 467);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 3029);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ 2901);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ 4756);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../EventBus.js */ 2454);\n\n\n\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n\n\n/**\r\n * Dock - LinkOS-authentic dock interface with magnification and spring physics\r\n * Handles app icons, magnification effects, drag-to-rearrange, and context menus\r\n */\nvar Dock = /*#__PURE__*/function () {\n  function Dock() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Dock);\n    this.container = null;\n    this.iconsContainer = null;\n    this.contextMenu = null;\n\n    // State\n    this.apps = [];\n    this.recentApps = [];\n    this.runningApps = new Set();\n    this.preferences = {};\n    this.isDragging = false;\n    this.draggedApp = null;\n\n    // Configuration\n    this.config = {\n      position: 'bottom',\n      // bottom, left, right\n      size: 64,\n      // Icon size in pixels\n      maxScale: 1.5,\n      // Maximum magnification\n      magnetRadius: 100,\n      // Magnification effect radius\n      springDuration: 300,\n      // Animation duration in ms\n      hoverResponse: 50,\n      // Hover response time in ms\n      autoHide: false,\n      magnificationEnabled: true,\n      showRecentApps: true,\n      maxRecentApps: 5\n    };\n    this.init();\n  }\n\n  /**\r\n   * Initialize dock component\r\n   */\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Dock, [{\n    key: \"init\",\n    value: function () {\n      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.loadPreferences();\n            case 3:\n              _context.next = 5;\n              return this.loadDockApps();\n            case 5:\n              this.createElements();\n              this.bindEvents();\n              this.createDockIcons();\n\n              // Setup magnification system\n              this.setupMagnification();\n              _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('dock:ready', {\n                apps: this.apps.length,\n                position: this.config.position\n              });\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              this.handleError(_context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\r\n     * Create dock elements\r\n     */\n  }, {\n    key: \"createElements\",\n    value: function createElements() {\n      // Find or create dock container\n      this.container = document.getElementById('dock-container');\n      if (!this.container) {\n        this.container = document.createElement('div');\n        this.container.id = 'dock-container';\n        document.body.appendChild(this.container);\n      }\n      this.container.className = 'dock-container';\n      this.container.style.display = 'block'; // Show the dock\n\n      // Set position-based styles\n      this.applyPositionStyles();\n\n      // Create inner dock\n      var dock = document.createElement('div');\n      dock.className = 'dock';\n      dock.style.cssText = \"\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            background: rgba(0, 0, 0, 0.3);\\n            backdrop-filter: blur(16px);\\n            border-radius: 12px;\\n            padding: 8px 12px;\\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\\n            transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\\n        \";\n\n      // Create icons container\n      this.iconsContainer = document.createElement('div');\n      this.iconsContainer.className = 'dock-icons';\n      this.iconsContainer.style.cssText = \"\\n            display: flex;\\n            align-items: center;\\n            gap: 8px;\\n            transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\\n        \";\n\n      // Create context menu\n      this.createContextMenu();\n\n      // Assemble dock\n      dock.appendChild(this.iconsContainer);\n      this.container.appendChild(dock);\n    }\n\n    /**\r\n     * Apply position-based styles to dock container\r\n     */\n  }, {\n    key: \"applyPositionStyles\",\n    value: function applyPositionStyles() {\n      var baseStyles = \"\\n            position: fixed;\\n            z-index: 1000;\\n            transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\\n        \";\n      switch (this.config.position) {\n        case 'bottom':\n          this.container.style.cssText = baseStyles + \"\\n                    bottom: 8px;\\n                    left: 50%;\\n                    transform: translateX(-50%);\\n                \";\n          break;\n        case 'left':\n          this.container.style.cssText = baseStyles + \"\\n                    left: 8px;\\n                    top: 50%;\\n                    transform: translateY(-50%);\\n                \";\n          this.iconsContainer.style.flexDirection = 'column';\n          break;\n        case 'right':\n          this.container.style.cssText = baseStyles + \"\\n                    right: 8px;\\n                    top: 50%;\\n                    transform: translateY(-50%);\\n                \";\n          this.iconsContainer.style.flexDirection = 'column';\n          break;\n      }\n    }\n\n    /**\r\n     * Bind event listeners\r\n     */\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      // Global mouse move for magnification\n      document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n\n      // App state events\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on('app:launched', this.handleAppLaunched.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on('app:closed', this.handleAppClosed.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on('preferences:changed', this.handlePreferencesChanged.bind(this));\n\n      // Keyboard shortcuts\n      document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n      // Auto-hide functionality\n      if (this.config.autoHide) {\n        this.setupAutoHide();\n      }\n    }\n\n    /**\r\n     * Load dock preferences\r\n     */\n  }, {\n    key: \"loadPreferences\",\n    value: function () {\n      var _loadPreferences = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch('/api/preferences');\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n            case 6:\n              data = _context2.sent;\n              if (data.success && data.data.dock) {\n                this.preferences = data.data.dock;\n                this.updateConfigFromPreferences();\n              }\n              _context2.next = 13;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.warn('Failed to load dock preferences:', _context2.t0);\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n      function loadPreferences() {\n        return _loadPreferences.apply(this, arguments);\n      }\n      return loadPreferences;\n    }()\n    /**\r\n     * Update configuration from preferences\r\n     */\n  }, {\n    key: \"updateConfigFromPreferences\",\n    value: function updateConfigFromPreferences() {\n      if (this.preferences.position) {\n        this.config.position = this.preferences.position;\n      }\n      if (this.preferences.size) {\n        this.config.size = this.preferences.size;\n      }\n      if (this.preferences.magnificationEnabled !== undefined) {\n        this.config.magnificationEnabled = this.preferences.magnificationEnabled;\n      }\n      if (this.preferences.autoHide !== undefined) {\n        this.config.autoHide = this.preferences.autoHide;\n      }\n    }\n\n    /**\r\n     * Load dock applications\r\n     */\n  }, {\n    key: \"loadDockApps\",\n    value: function () {\n      var _loadDockApps = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {\n        var response, data;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch('/data/desktop-apps.json');\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n            case 6:\n              data = _context3.sent;\n              if (data && data.apps) {\n                // Get featured apps for dock\n                this.apps = data.apps.filter(function (app) {\n                  return app.featured;\n                }).slice(0, 7);\n\n                // Add finder as first app if not present\n                if (!this.apps.find(function (app) {\n                  return app.id === 'finder';\n                })) {\n                  this.apps.unshift({\n                    id: 'finder',\n                    name: 'Finder',\n                    icon: '/images/icons/finder.png',\n                    type: 'system',\n                    component: 'Finder'\n                  });\n                }\n              } else {\n                this.apps = this.getDefaultDockApps();\n              }\n              _context3.next = 14;\n              break;\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.warn('Failed to load dock apps, using defaults:', _context3.t0);\n              this.apps = this.getDefaultDockApps();\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n      function loadDockApps() {\n        return _loadDockApps.apply(this, arguments);\n      }\n      return loadDockApps;\n    }()\n    /**\r\n     * Get default dock applications\r\n     */\n  }, {\n    key: \"getDefaultDockApps\",\n    value: function getDefaultDockApps() {\n      return [{\n        id: 'finder',\n        name: 'Finder',\n        icon: '/images/icons/finder.png',\n        type: 'system'\n      }, {\n        id: 'terminal',\n        name: 'Terminal',\n        icon: '/images/icons/terminal.png',\n        type: 'internal'\n      }, {\n        id: 'portfolio',\n        name: 'Portfolio',\n        icon: '/images/icons/portfolio.png',\n        type: 'internal'\n      }, {\n        id: 'about',\n        name: 'About',\n        icon: '/images/icons/about.png',\n        type: 'internal'\n      }, {\n        id: 'contact',\n        name: 'Contact',\n        icon: '/images/icons/contact.png',\n        type: 'internal'\n      }, {\n        id: 'preferences',\n        name: 'System Preferences',\n        icon: '/images/icons/preferences.png',\n        type: 'internal'\n      }];\n    }\n\n    /**\r\n     * Create dock icons\r\n     */\n  }, {\n    key: \"createDockIcons\",\n    value: function createDockIcons() {\n      var _this = this;\n      if (!this.iconsContainer) return;\n\n      // Clear existing icons\n      this.iconsContainer.innerHTML = '';\n\n      // Create app icons\n      this.apps.forEach(function (app, index) {\n        _this.createDockIcon(app, index);\n      });\n\n      // Add separator and recent apps if enabled\n      if (this.config.showRecentApps && this.recentApps.length > 0) {\n        this.addRecentAppsSection();\n      }\n    }\n\n    /**\r\n     * Create individual dock icon\r\n     */\n  }, {\n    key: \"createDockIcon\",\n    value: function createDockIcon(app, index) {\n      var iconContainer = document.createElement('div');\n      iconContainer.className = 'dock-icon-container';\n      iconContainer.dataset.appId = app.id;\n      iconContainer.dataset.index = index;\n      iconContainer.style.cssText = \"\\n            position: relative;\\n            display: flex;\\n            flex-direction: column;\\n            align-items: center;\\n            cursor: pointer;\\n            user-select: none;\\n            transform-origin: bottom center;\\n            transition: transform \".concat(this.config.springDuration, \"ms cubic-bezier(0.4, 0, 0.2, 1);\\n        \");\n\n      // Create icon image\n      var iconImg = document.createElement('div');\n      iconImg.className = 'dock-icon';\n      iconImg.dataset.appName = app.name;\n      iconImg.style.cssText = \"\\n            width: \".concat(this.config.size, \"px;\\n            height: \").concat(this.config.size, \"px;\\n            background-image: url(\").concat(app.icon, \");\\n            background-size: cover;\\n            background-position: center;\\n            background-color: #007aff;\\n            border-radius: 12px;\\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\\n            transition: all \").concat(this.config.springDuration, \"ms cubic-bezier(0.4, 0, 0.2, 1);\\n            position: relative;\\n        \");\n\n      // Handle missing icon images\n      var testImg = new Image();\n      testImg.onload = function () {\n        // Icon loaded successfully, hide fallback text\n        iconImg.style.setProperty('--icon-fallback-opacity', '0');\n      };\n      testImg.onerror = function () {\n        // Icon failed to load, show fallback text\n        iconImg.style.backgroundImage = 'none';\n        iconImg.style.setProperty('--icon-fallback-opacity', '1');\n      };\n      testImg.src = app.icon;\n\n      // Create running indicator dot\n      var indicator = document.createElement('div');\n      indicator.className = 'running-indicator';\n      indicator.style.cssText = \"\\n            position: absolute;\\n            bottom: -8px;\\n            left: 50%;\\n            transform: translateX(-50%);\\n            width: 4px;\\n            height: 4px;\\n            background: #666;\\n            border-radius: 50%;\\n            opacity: 0;\\n            transition: opacity 200ms ease;\\n        \";\n\n      // Create app label\n      var label = document.createElement('div');\n      label.className = 'dock-label';\n      label.textContent = app.name;\n      label.style.cssText = \"\\n            position: absolute;\\n            bottom: \".concat(this.config.size + 20, \"px;\\n            left: 50%;\\n            transform: translateX(-50%);\\n            background: rgba(0, 0, 0, 0.8);\\n            color: white;\\n            padding: 4px 8px;\\n            border-radius: 4px;\\n            font-size: 11px;\\n            font-weight: 500;\\n            white-space: nowrap;\\n            opacity: 0;\\n            pointer-events: none;\\n            transition: opacity 200ms ease;\\n            z-index: 1001;\\n        \");\n\n      // Assemble icon\n      iconContainer.appendChild(iconImg);\n      iconContainer.appendChild(indicator);\n      iconContainer.appendChild(label);\n\n      // Add event listeners\n      this.addIconEventListeners(iconContainer, app);\n\n      // Add to container\n      this.iconsContainer.appendChild(iconContainer);\n\n      // Update running state\n      if (this.runningApps.has(app.id)) {\n        indicator.style.opacity = '1';\n      }\n    }\n\n    /**\r\n     * Add event listeners to dock icon\r\n     */\n  }, {\n    key: \"addIconEventListeners\",\n    value: function addIconEventListeners(iconContainer, app) {\n      var _this2 = this;\n      var iconImg = iconContainer.querySelector('.dock-icon');\n      var label = iconContainer.querySelector('.dock-label');\n\n      // Click to launch app\n      iconContainer.addEventListener('click', function (e) {\n        e.preventDefault();\n        _this2.launchApp(app);\n      });\n\n      // Context menu (Control+Click or Right+Click)\n      iconContainer.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n        _this2.showContextMenu(e, app);\n      });\n      iconContainer.addEventListener('mousedown', function (e) {\n        if (e.ctrlKey || e.metaKey) {\n          e.preventDefault();\n          _this2.showContextMenu(e, app);\n        }\n      });\n\n      // Hover for label\n      iconContainer.addEventListener('mouseenter', function () {\n        if (!_this2.isDragging) {\n          label.style.opacity = '1';\n        }\n      });\n      iconContainer.addEventListener('mouseleave', function () {\n        label.style.opacity = '0';\n      });\n\n      // Drag functionality\n      iconContainer.draggable = true;\n      iconContainer.addEventListener('dragstart', function (e) {\n        _this2.isDragging = true;\n        _this2.draggedApp = app;\n        iconContainer.style.opacity = '0.5';\n\n        // Hide label during drag\n        label.style.opacity = '0';\n      });\n      iconContainer.addEventListener('dragend', function (e) {\n        _this2.isDragging = false;\n        _this2.draggedApp = null;\n        iconContainer.style.opacity = '1';\n      });\n    }\n\n    /**\r\n     * Setup magnification system\r\n     */\n  }, {\n    key: \"setupMagnification\",\n    value: function setupMagnification() {\n      var _this3 = this;\n      if (!this.config.magnificationEnabled) return;\n      this.magnificationActive = true;\n\n      // Store original icon sizes\n      this.originalSizes = {};\n      var icons = this.iconsContainer.querySelectorAll('.dock-icon-container');\n      icons.forEach(function (icon, index) {\n        _this3.originalSizes[index] = {\n          width: _this3.config.size,\n          height: _this3.config.size\n        };\n      });\n    }\n\n    /**\r\n     * Handle mouse move for magnification\r\n     */\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      if (!this.magnificationActive || this.isDragging) return;\n      var dockRect = this.iconsContainer.getBoundingClientRect();\n      var mouseX = event.clientX;\n      var mouseY = event.clientY;\n\n      // Check if mouse is near dock\n      var isNearDock = this.isMouseNearDock(mouseX, mouseY, dockRect);\n      if (isNearDock) {\n        this.applyMagnification(mouseX, mouseY, dockRect);\n      } else {\n        this.resetMagnification();\n      }\n    }\n\n    /**\r\n     * Check if mouse is near dock for magnification\r\n     */\n  }, {\n    key: \"isMouseNearDock\",\n    value: function isMouseNearDock(mouseX, mouseY, dockRect) {\n      var margin = this.config.magnetRadius;\n      return mouseX >= dockRect.left - margin && mouseX <= dockRect.right + margin && mouseY >= dockRect.top - margin && mouseY <= dockRect.bottom + margin;\n    }\n\n    /**\r\n     * Apply magnification effect to dock icons\r\n     */\n  }, {\n    key: \"applyMagnification\",\n    value: function applyMagnification(mouseX, mouseY, dockRect) {\n      var _this4 = this;\n      var icons = this.iconsContainer.querySelectorAll('.dock-icon-container');\n      icons.forEach(function (iconContainer, index) {\n        var iconRect = iconContainer.getBoundingClientRect();\n        var iconCenterX = iconRect.left + iconRect.width / 2;\n        var iconCenterY = iconRect.top + iconRect.height / 2;\n\n        // Calculate distance from mouse to icon center\n        var distance = Math.sqrt(Math.pow(mouseX - iconCenterX, 2) + Math.pow(mouseY - iconCenterY, 2));\n\n        // Calculate scale based on distance\n        var scale = 1;\n        if (distance < _this4.config.magnetRadius) {\n          var proximity = 1 - distance / _this4.config.magnetRadius;\n          scale = 1 + proximity * (_this4.config.maxScale - 1);\n        }\n\n        // Apply scale with smooth transition\n        var iconImg = iconContainer.querySelector('.dock-icon');\n        iconImg.style.transform = \"scale(\".concat(scale, \")\");\n\n        // Add lift effect for hovered icon\n        if (scale > 1.2) {\n          iconImg.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.5)';\n        } else {\n          iconImg.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';\n        }\n      });\n    }\n\n    /**\r\n     * Reset magnification to normal state\r\n     */\n  }, {\n    key: \"resetMagnification\",\n    value: function resetMagnification() {\n      var icons = this.iconsContainer.querySelectorAll('.dock-icon');\n      icons.forEach(function (iconImg) {\n        iconImg.style.transform = 'scale(1)';\n        iconImg.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';\n      });\n    }\n\n    /**\r\n     * Launch application\r\n     */\n  }, {\n    key: \"launchApp\",\n    value: function launchApp(app) {\n      console.log('Launching app from dock:', app.name);\n\n      // Add bounce animation\n      this.addBounceAnimation(app.id);\n\n      // Mark as running\n      this.runningApps.add(app.id);\n      this.updateRunningIndicator(app.id, true);\n\n      // Emit app launch event\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('app:launch', {\n        appId: app.id,\n        name: app.name,\n        component: app.component,\n        type: app.type,\n        config: {\n          title: app.name,\n          size: app.size || {\n            width: 800,\n            height: 600\n          }\n        }\n      });\n\n      // Add to recent apps\n      this.addToRecentApps(app);\n    }\n\n    /**\r\n     * Add bounce animation to app icon\r\n     */\n  }, {\n    key: \"addBounceAnimation\",\n    value: function addBounceAnimation(appId) {\n      var iconContainer = this.iconsContainer.querySelector(\"[data-app-id=\\\"\".concat(appId, \"\\\"]\"));\n      if (!iconContainer) return;\n      var iconImg = iconContainer.querySelector('.dock-icon');\n\n      // Create bounce keyframes\n      iconImg.style.animation = 'dockBounce 0.6s cubic-bezier(0.4, 0, 0.2, 1)';\n\n      // Remove animation after completion\n      setTimeout(function () {\n        iconImg.style.animation = '';\n      }, 600);\n    }\n\n    /**\r\n     * Update running indicator for app\r\n     */\n  }, {\n    key: \"updateRunningIndicator\",\n    value: function updateRunningIndicator(appId, isRunning) {\n      var iconContainer = this.iconsContainer.querySelector(\"[data-app-id=\\\"\".concat(appId, \"\\\"]\"));\n      if (!iconContainer) return;\n      var indicator = iconContainer.querySelector('.running-indicator');\n      indicator.style.opacity = isRunning ? '1' : '0';\n    }\n\n    /**\r\n     * Show context menu for dock icon\r\n     */\n  }, {\n    key: \"showContextMenu\",\n    value: function showContextMenu(event, app) {\n      var _this5 = this;\n      if (!this.contextMenu) return;\n\n      // Position context menu\n      var x = event.clientX;\n      var y = event.clientY - 150; // Above the dock\n\n      this.contextMenu.style.left = x + 'px';\n      this.contextMenu.style.top = y + 'px';\n      this.contextMenu.style.display = 'block';\n      this.contextMenu.style.opacity = '1';\n\n      // Update context menu content based on app\n      this.updateContextMenuContent(app);\n\n      // Store current app for context actions\n      this.contextMenu.dataset.appId = app.id;\n\n      // Hide menu on outside click\n      setTimeout(function () {\n        document.addEventListener('click', _this5.hideContextMenu.bind(_this5), {\n          once: true\n        });\n      }, 100);\n    }\n\n    /**\r\n     * Create context menu element\r\n     */\n  }, {\n    key: \"createContextMenu\",\n    value: function createContextMenu() {\n      this.contextMenu = document.createElement('div');\n      this.contextMenu.className = 'dock-context-menu';\n      this.contextMenu.style.cssText = \"\\n            position: fixed;\\n            background: rgba(255, 255, 255, 0.9);\\n            backdrop-filter: blur(20px);\\n            border: 1px solid rgba(0, 0, 0, 0.1);\\n            border-radius: 8px;\\n            padding: 4px 0;\\n            min-width: 140px;\\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\\n            z-index: 10000;\\n            display: none;\\n            opacity: 0;\\n            transition: opacity 200ms ease;\\n        \";\n      document.body.appendChild(this.contextMenu);\n\n      // Add event listener for menu actions\n      this.contextMenu.addEventListener('click', this.handleContextMenuClick.bind(this));\n    }\n\n    /**\r\n     * Update context menu content\r\n     */\n  }, {\n    key: \"updateContextMenuContent\",\n    value: function updateContextMenuContent(app) {\n      var isRunning = this.runningApps.has(app.id);\n      this.contextMenu.innerHTML = \"\\n            <div class=\\\"context-menu-item\\\" data-action=\\\"open\\\">\\n                \".concat(isRunning ? 'Show' : 'Open', \"\\n            </div>\\n            <div class=\\\"context-menu-separator\\\"></div>\\n            <div class=\\\"context-menu-item\\\" data-action=\\\"keep-in-dock\\\">\\n                Keep in Dock\\n            </div>\\n            <div class=\\\"context-menu-item\\\" data-action=\\\"remove-from-dock\\\">\\n                Remove from Dock\\n            </div>\\n            \").concat(isRunning ? \"\\n                <div class=\\\"context-menu-separator\\\"></div>\\n                <div class=\\\"context-menu-item\\\" data-action=\\\"force-quit\\\">\\n                    Force Quit\\n                </div>\\n            \" : '', \"\\n        \");\n\n      // Style menu items\n      var items = this.contextMenu.querySelectorAll('.context-menu-item');\n      items.forEach(function (item) {\n        item.style.cssText = \"\\n                padding: 6px 12px;\\n                cursor: pointer;\\n                font-size: 13px;\\n                color: #333;\\n                transition: background-color 150ms ease;\\n            \";\n        item.addEventListener('mouseenter', function () {\n          item.style.backgroundColor = 'rgba(0, 122, 255, 0.1)';\n        });\n        item.addEventListener('mouseleave', function () {\n          item.style.backgroundColor = 'transparent';\n        });\n      });\n\n      // Style separators\n      var separators = this.contextMenu.querySelectorAll('.context-menu-separator');\n      separators.forEach(function (separator) {\n        separator.style.cssText = \"\\n                height: 1px;\\n                background: rgba(0, 0, 0, 0.1);\\n                margin: 4px 0;\\n            \";\n      });\n    }\n\n    /**\r\n     * Handle context menu clicks\r\n     */\n  }, {\n    key: \"handleContextMenuClick\",\n    value: function handleContextMenuClick(event) {\n      var action = event.target.dataset.action;\n      var appId = this.contextMenu.dataset.appId;\n      if (!action || !appId) return;\n      var app = this.apps.find(function (a) {\n        return a.id === appId;\n      });\n      if (!app) return;\n      switch (action) {\n        case 'open':\n          this.launchApp(app);\n          break;\n        case 'keep-in-dock':\n          // Already in dock, just close menu\n          break;\n        case 'remove-from-dock':\n          this.removeAppFromDock(appId);\n          break;\n        case 'force-quit':\n          this.forceQuitApp(appId);\n          break;\n      }\n      this.hideContextMenu();\n    }\n\n    /**\r\n     * Hide context menu\r\n     */\n  }, {\n    key: \"hideContextMenu\",\n    value: function hideContextMenu() {\n      var _this6 = this;\n      if (this.contextMenu) {\n        this.contextMenu.style.opacity = '0';\n        setTimeout(function () {\n          _this6.contextMenu.style.display = 'none';\n        }, 200);\n      }\n    }\n\n    /**\r\n     * Handle keyboard shortcuts\r\n     */\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      // Control+Shift: Toggle magnification\n      if (event.ctrlKey && event.shiftKey && !event.repeat) {\n        this.toggleMagnification();\n        event.preventDefault();\n      }\n    }\n\n    /**\r\n     * Toggle magnification on/off\r\n     */\n  }, {\n    key: \"toggleMagnification\",\n    value: function toggleMagnification() {\n      this.config.magnificationEnabled = !this.config.magnificationEnabled;\n      if (this.config.magnificationEnabled) {\n        this.setupMagnification();\n        console.log('Dock magnification enabled');\n      } else {\n        this.magnificationActive = false;\n        this.resetMagnification();\n        console.log('Dock magnification disabled');\n      }\n\n      // Save preference\n      this.savePreference('magnificationEnabled', this.config.magnificationEnabled);\n    }\n\n    /**\r\n     * Save dock preference\r\n     */\n  }, {\n    key: \"savePreference\",\n    value: function () {\n      var _savePreference = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(key, value) {\n        var preferences;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              preferences = {\n                dock: (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, key, value)\n              };\n              _context4.next = 4;\n              return fetch('/api/preferences', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(preferences)\n              });\n            case 4:\n              _context4.next = 9;\n              break;\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.warn('Failed to save dock preference:', _context4.t0);\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 6]]);\n      }));\n      function savePreference(_x, _x2) {\n        return _savePreference.apply(this, arguments);\n      }\n      return savePreference;\n    }()\n    /**\r\n     * Handle app launched event\r\n     */\n  }, {\n    key: \"handleAppLaunched\",\n    value: function handleAppLaunched(data) {\n      this.runningApps.add(data.id);\n      this.updateRunningIndicator(data.id, true);\n    }\n\n    /**\r\n     * Handle app closed event\r\n     */\n  }, {\n    key: \"handleAppClosed\",\n    value: function handleAppClosed(data) {\n      this.runningApps[\"delete\"](data.id);\n      this.updateRunningIndicator(data.id, false);\n    }\n\n    /**\r\n     * Handle preferences changed\r\n     */\n  }, {\n    key: \"handlePreferencesChanged\",\n    value: function handlePreferencesChanged(data) {\n      if (data.category === 'dock') {\n        this.preferences = _objectSpread(_objectSpread({}, this.preferences), data.preferences);\n        this.updateConfigFromPreferences();\n        this.applyPositionStyles();\n      }\n    }\n\n    /**\r\n     * Add to recent apps\r\n     */\n  }, {\n    key: \"addToRecentApps\",\n    value: function addToRecentApps(app) {\n      // Remove if already exists\n      this.recentApps = this.recentApps.filter(function (recent) {\n        return recent.id !== app.id;\n      });\n\n      // Add to beginning\n      this.recentApps.unshift(app);\n\n      // Keep only max count\n      this.recentApps = this.recentApps.slice(0, this.config.maxRecentApps);\n    }\n\n    /**\r\n     * Remove app from dock\r\n     */\n  }, {\n    key: \"removeAppFromDock\",\n    value: function removeAppFromDock(appId) {\n      this.apps = this.apps.filter(function (app) {\n        return app.id !== appId;\n      });\n      this.createDockIcons();\n    }\n\n    /**\r\n     * Force quit application\r\n     */\n  }, {\n    key: \"forceQuitApp\",\n    value: function forceQuitApp(appId) {\n      this.runningApps[\"delete\"](appId);\n      this.updateRunningIndicator(appId, false);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('app:force-quit', {\n        id: appId\n      });\n    }\n\n    /**\r\n     * Handle error conditions\r\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      console.error('Dock error:', error);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].emit('dock:error', {\n        error: error.message\n      });\n    }\n\n    /**\r\n     * Clean up resources\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Remove event listeners\n      document.removeEventListener('mousemove', this.handleMouseMove.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].off('app:launched', this.handleAppLaunched.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].off('app:closed', this.handleAppClosed.bind(this));\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].off('preferences:changed', this.handlePreferencesChanged.bind(this));\n\n      // Remove elements\n      if (this.container) {\n        this.container.remove();\n      }\n      if (this.contextMenu) {\n        this.contextMenu.remove();\n      }\n      console.log('Dock component destroyed');\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dock);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7813\n");

/***/ }),

/***/ 4078:
/*!*************************************************!*\
  !*** ./resources/js/components/LinkOS/Window.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 3453);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 4467);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 3029);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ 2901);\n/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../EventBus.js */ 2454);\n\n\n\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n\n/**\r\n * Window - LinkOS window management system\r\n * Handles draggable windows, traffic light controls, and authentic LinkOS behavior\r\n */\nvar Window = /*#__PURE__*/function () {\n  function Window() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, Window);\n    // Required configuration\n    this.id = config.id || this.generateId();\n    this.title = config.title || 'Untitled';\n    this.content = config.content || '';\n    this.appId = config.appId || 'unknown';\n\n    // Window properties\n    this.position = config.position || {\n      x: 100,\n      y: 100\n    };\n    this.size = config.size || {\n      width: 800,\n      height: 600\n    };\n    this.minSize = config.minSize || {\n      width: 300,\n      height: 200\n    };\n    this.maxSize = config.maxSize || {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    // Window state\n    this.isVisible = false;\n    this.isMinimized = false;\n    this.isMaximized = false;\n    this.isResizing = false;\n    this.isDragging = false;\n    this.isFocused = false;\n    this.zIndex = Window.getNextZIndex();\n\n    // DOM elements\n    this.element = null;\n    this.titleBar = null;\n    this.contentArea = null;\n    this.trafficLights = {};\n    this.resizeHandles = {};\n\n    // Event handlers\n    this.dragState = {\n      isDragging: false,\n      startX: 0,\n      startY: 0,\n      startPosX: 0,\n      startPosY: 0\n    };\n    this.resizeState = {\n      isResizing: false,\n      direction: '',\n      startX: 0,\n      startY: 0,\n      startWidth: 0,\n      startHeight: 0\n    };\n\n    // Configuration\n    this.config = _objectSpread({\n      titleBarHeight: 28,\n      trafficLightSize: 12,\n      resizeHandleSize: 10,\n      shadowBlur: 20,\n      borderRadius: 8,\n      animationDuration: 300,\n      snapThreshold: 10\n    }, config.windowConfig);\n    this.init();\n  }\n\n  /**\r\n   * Initialize window\r\n   */\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Window, [{\n    key: \"init\",\n    value: function init() {\n      this.createElement();\n      this.setupEventListeners();\n      this.setupKeyboardShortcuts();\n\n      // Register window with manager\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:created', {\n        windowId: this.id,\n        appId: this.appId,\n        window: this\n      });\n      console.log(\"Window created: \".concat(this.title, \" (\").concat(this.id, \")\"));\n    }\n\n    /**\r\n     * Create window DOM element\r\n     */\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      // Main window container\n      this.element = document.createElement('div');\n      this.element.className = 'LinkOS-window';\n      this.element.id = \"window-\".concat(this.id);\n      this.element.style.cssText = \"\\n            position: fixed;\\n            left: \".concat(this.position.x, \"px;\\n            top: \").concat(this.position.y, \"px;\\n            width: \").concat(this.size.width, \"px;\\n            height: \").concat(this.size.height, \"px;\\n            z-index: \").concat(this.zIndex, \";\\n            background: rgba(246, 246, 246, 0.95);\\n            backdrop-filter: blur(20px);\\n            border-radius: \").concat(this.config.borderRadius, \"px;\\n            box-shadow: 0 \").concat(this.config.shadowBlur, \"px \").concat(this.config.shadowBlur * 2, \"px rgba(0, 0, 0, 0.3);\\n            border: 1px solid rgba(255, 255, 255, 0.2);\\n            overflow: hidden;\\n            transition: transform \").concat(this.config.animationDuration, \"ms cubic-bezier(0.4, 0, 0.2, 1);\\n            transform: scale(0.9) translateY(20px);\\n            opacity: 0;\\n        \");\n\n      // Title bar\n      this.createTitleBar();\n\n      // Content area\n      this.createContentArea();\n\n      // Resize handles\n      this.createResizeHandles();\n\n      // Add to DOM\n      document.body.appendChild(this.element);\n    }\n\n    /**\r\n     * Create title bar with traffic lights\r\n     */\n  }, {\n    key: \"createTitleBar\",\n    value: function createTitleBar() {\n      this.titleBar = document.createElement('div');\n      this.titleBar.className = 'window-titlebar';\n      this.titleBar.style.cssText = \"\\n            height: \".concat(this.config.titleBarHeight, \"px;\\n            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.9), rgba(240, 240, 240, 0.9));\\n            border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n            display: flex;\\n            align-items: center;\\n            padding: 0 12px;\\n            cursor: move;\\n            user-select: none;\\n        \");\n\n      // Traffic lights container\n      var trafficLightsContainer = document.createElement('div');\n      trafficLightsContainer.className = 'traffic-lights';\n      trafficLightsContainer.style.cssText = \"\\n            display: flex;\\n            gap: 8px;\\n            margin-right: 12px;\\n        \";\n\n      // Create traffic light buttons\n      this.createTrafficLights(trafficLightsContainer);\n\n      // Window title\n      var titleElement = document.createElement('div');\n      titleElement.className = 'window-title';\n      titleElement.textContent = this.title;\n      titleElement.style.cssText = \"\\n            flex: 1;\\n            text-align: center;\\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\\n            font-size: 13px;\\n            font-weight: 500;\\n            color: rgba(0, 0, 0, 0.85);\\n            overflow: hidden;\\n            text-overflow: ellipsis;\\n            white-space: nowrap;\\n        \";\n      this.titleBar.appendChild(trafficLightsContainer);\n      this.titleBar.appendChild(titleElement);\n      this.element.appendChild(this.titleBar);\n    }\n\n    /**\r\n     * Create traffic light buttons (close, minimize, maximize)\r\n     */\n  }, {\n    key: \"createTrafficLights\",\n    value: function createTrafficLights(container) {\n      var _this = this;\n      var buttons = [{\n        type: 'close',\n        color: '#ff5f57',\n        hoverColor: '#ff4743',\n        symbol: '×'\n      }, {\n        type: 'minimize',\n        color: '#ffbd2e',\n        hoverColor: '#ffab00',\n        symbol: '−'\n      }, {\n        type: 'maximize',\n        color: '#28ca42',\n        hoverColor: '#1fb934',\n        symbol: '⌃'\n      }];\n      buttons.forEach(function (_ref) {\n        var type = _ref.type,\n          color = _ref.color,\n          hoverColor = _ref.hoverColor,\n          symbol = _ref.symbol;\n        var button = document.createElement('button');\n        button.className = \"traffic-light traffic-light-\".concat(type);\n        button.style.cssText = \"\\n                width: \".concat(_this.config.trafficLightSize, \"px;\\n                height: \").concat(_this.config.trafficLightSize, \"px;\\n                border-radius: 50%;\\n                border: none;\\n                background: \").concat(color, \";\\n                cursor: pointer;\\n                display: flex;\\n                align-items: center;\\n                justify-content: center;\\n                font-size: 9px;\\n                font-weight: bold;\\n                color: rgba(0, 0, 0, 0.6);\\n                transition: all 150ms ease;\\n                opacity: 0.8;\\n            \");\n\n        // Add symbol on hover\n        button.addEventListener('mouseenter', function () {\n          button.textContent = symbol;\n          button.style.background = hoverColor;\n          button.style.opacity = '1';\n        });\n        button.addEventListener('mouseleave', function () {\n          button.textContent = '';\n          button.style.background = color;\n          button.style.opacity = '0.8';\n        });\n\n        // Button functionality\n        button.addEventListener('click', function (e) {\n          e.stopPropagation();\n          _this.handleTrafficLightClick(type);\n        });\n        _this.trafficLights[type] = button;\n        container.appendChild(button);\n      });\n    }\n\n    /**\r\n     * Create content area\r\n     */\n  }, {\n    key: \"createContentArea\",\n    value: function createContentArea() {\n      this.contentArea = document.createElement('div');\n      this.contentArea.className = 'window-content';\n      this.contentArea.style.cssText = \"\\n            height: calc(100% - \".concat(this.config.titleBarHeight, \"px);\\n            overflow: auto;\\n            background: rgba(255, 255, 255, 0.95);\\n        \");\n\n      // Set content\n      if (typeof this.content === 'string') {\n        this.contentArea.innerHTML = this.content;\n      } else if (this.content instanceof HTMLElement) {\n        this.contentArea.appendChild(this.content);\n      }\n      this.element.appendChild(this.contentArea);\n    }\n\n    /**\r\n     * Create resize handles\r\n     */\n  }, {\n    key: \"createResizeHandles\",\n    value: function createResizeHandles() {\n      var _this2 = this;\n      var handles = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'];\n      handles.forEach(function (direction) {\n        var handle = document.createElement('div');\n        handle.className = \"resize-handle resize-\".concat(direction);\n        handle.style.cssText = _this2.getResizeHandleStyles(direction);\n        handle.addEventListener('mousedown', function (e) {\n          _this2.startResize(e, direction);\n        });\n        _this2.resizeHandles[direction] = handle;\n        _this2.element.appendChild(handle);\n      });\n    }\n\n    /**\r\n     * Get resize handle styles based on direction\r\n     */\n  }, {\n    key: \"getResizeHandleStyles\",\n    value: function getResizeHandleStyles(direction) {\n      var size = this.config.resizeHandleSize;\n      var styles = {\n        position: 'absolute',\n        background: 'transparent',\n        'z-index': '10'\n      };\n      switch (direction) {\n        case 'n':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            top: '0',\n            left: \"\".concat(size, \"px\"),\n            right: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 'n-resize'\n          })));\n        case 'ne':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            top: '0',\n            right: '0',\n            width: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 'ne-resize'\n          })));\n        case 'e':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            top: \"\".concat(size, \"px\"),\n            right: '0',\n            bottom: \"\".concat(size, \"px\"),\n            width: \"\".concat(size, \"px\"),\n            cursor: 'e-resize'\n          })));\n        case 'se':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            bottom: '0',\n            right: '0',\n            width: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 'se-resize'\n          })));\n        case 's':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            bottom: '0',\n            left: \"\".concat(size, \"px\"),\n            right: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 's-resize'\n          })));\n        case 'sw':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            bottom: '0',\n            left: '0',\n            width: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 'sw-resize'\n          })));\n        case 'w':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            top: \"\".concat(size, \"px\"),\n            left: '0',\n            bottom: \"\".concat(size, \"px\"),\n            width: \"\".concat(size, \"px\"),\n            cursor: 'w-resize'\n          })));\n        case 'nw':\n          return \"\".concat(this.objectToCSS(_objectSpread(_objectSpread({}, styles), {}, {\n            top: '0',\n            left: '0',\n            width: \"\".concat(size, \"px\"),\n            height: \"\".concat(size, \"px\"),\n            cursor: 'nw-resize'\n          })));\n      }\n    }\n\n    /**\r\n     * Convert object to CSS string\r\n     */\n  }, {\n    key: \"objectToCSS\",\n    value: function objectToCSS(obj) {\n      return Object.entries(obj).map(function (_ref2) {\n        var _ref3 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n        return \"\".concat(key, \": \").concat(value);\n      }).join('; ');\n    }\n\n    /**\r\n     * Setup event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this3 = this;\n      // Title bar dragging\n      this.titleBar.addEventListener('mousedown', function (e) {\n        if (e.target.classList.contains('traffic-light')) return;\n        _this3.startDrag(e);\n      });\n\n      // Window focus\n      this.element.addEventListener('mousedown', function () {\n        _this3.focus();\n      });\n\n      // Global mouse events for dragging and resizing\n      document.addEventListener('mousemove', function (e) {\n        if (_this3.isDragging) {\n          _this3.handleDrag(e);\n        } else if (_this3.isResizing) {\n          _this3.handleResize(e);\n        }\n      });\n      document.addEventListener('mouseup', function () {\n        _this3.stopDrag();\n        _this3.stopResize();\n      });\n\n      // Double-click to maximize\n      this.titleBar.addEventListener('dblclick', function () {\n        _this3.toggleMaximize();\n      });\n    }\n\n    /**\r\n     * Setup keyboard shortcuts\r\n     */\n  }, {\n    key: \"setupKeyboardShortcuts\",\n    value: function setupKeyboardShortcuts() {\n      var _this4 = this;\n      document.addEventListener('keydown', function (e) {\n        if (!_this4.isFocused) return;\n\n        // Command+M - Minimize\n        if (e.metaKey && e.key === 'm') {\n          e.preventDefault();\n          _this4.minimize();\n        }\n\n        // Command+W - Close\n        if (e.metaKey && e.key === 'w') {\n          e.preventDefault();\n          _this4.close();\n        }\n      });\n    }\n\n    /**\r\n     * Show window with animation\r\n     */\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this5 = this;\n      if (this.isVisible) return;\n      this.isVisible = true;\n      this.element.style.display = 'block';\n\n      // Animate in\n      requestAnimationFrame(function () {\n        _this5.element.style.transform = 'scale(1) translateY(0)';\n        _this5.element.style.opacity = '1';\n      });\n      this.focus();\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:shown', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Hide window\r\n     */\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _this6 = this;\n      if (!this.isVisible) return;\n      this.isVisible = false;\n\n      // Animate out\n      this.element.style.transform = 'scale(0.9) translateY(20px)';\n      this.element.style.opacity = '0';\n      setTimeout(function () {\n        _this6.element.style.display = 'none';\n      }, this.config.animationDuration);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:hidden', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Focus window (bring to front)\r\n     */\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.isFocused = true;\n      this.zIndex = Window.getNextZIndex();\n      this.element.style.zIndex = this.zIndex;\n\n      // Update visual state\n      this.element.classList.add('focused');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:focused', {\n        windowId: this.id,\n        appId: this.appId,\n        zIndex: this.zIndex\n      });\n    }\n\n    /**\r\n     * Remove focus from window\r\n     */\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.isFocused = false;\n      this.element.classList.remove('focused');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:blurred', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Handle traffic light button clicks\r\n     */\n  }, {\n    key: \"handleTrafficLightClick\",\n    value: function handleTrafficLightClick(type) {\n      switch (type) {\n        case 'close':\n          this.close();\n          break;\n        case 'minimize':\n          this.minimize();\n          break;\n        case 'maximize':\n          this.toggleMaximize();\n          break;\n      }\n    }\n\n    /**\r\n     * Close window\r\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this7 = this;\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:closing', {\n        windowId: this.id,\n        appId: this.appId\n      });\n\n      // Animate out\n      this.element.style.transform = 'scale(0.9) translateY(20px)';\n      this.element.style.opacity = '0';\n      setTimeout(function () {\n        _this7.destroy();\n      }, this.config.animationDuration);\n    }\n\n    /**\r\n     * Minimize window\r\n     */\n  }, {\n    key: \"minimize\",\n    value: function minimize() {\n      var _document$querySelect,\n        _this8 = this;\n      if (this.isMinimized) return;\n      this.isMinimized = true;\n      this.isVisible = false;\n\n      // Animate to dock\n      var dockRect = (_document$querySelect = document.querySelector('.dock')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getBoundingClientRect();\n      var targetX = dockRect ? dockRect.left + dockRect.width / 2 : window.innerWidth / 2;\n      var targetY = dockRect ? dockRect.top : window.innerHeight - 100;\n      this.element.style.transform = \"scale(0.1) translate(\".concat(targetX - this.position.x, \"px, \").concat(targetY - this.position.y, \"px)\");\n      this.element.style.opacity = '0';\n      setTimeout(function () {\n        _this8.element.style.display = 'none';\n      }, this.config.animationDuration);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:minimized', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Restore minimized window\r\n     */\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      var _this9 = this;\n      if (!this.isMinimized) return;\n      this.isMinimized = false;\n      this.element.style.display = 'block';\n\n      // Animate back to position\n      requestAnimationFrame(function () {\n        _this9.element.style.transform = 'scale(1) translate(0, 0)';\n        _this9.element.style.opacity = '1';\n      });\n      this.show();\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:restored', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Toggle maximize state\r\n     */\n  }, {\n    key: \"toggleMaximize\",\n    value: function toggleMaximize() {\n      if (this.isMaximized) {\n        this.unmaximize();\n      } else {\n        this.maximize();\n      }\n    }\n\n    /**\r\n     * Maximize window\r\n     */\n  }, {\n    key: \"maximize\",\n    value: function maximize() {\n      if (this.isMaximized) return;\n\n      // Store original position and size\n      this.originalPosition = _objectSpread({}, this.position);\n      this.originalSize = _objectSpread({}, this.size);\n      this.isMaximized = true;\n\n      // Animate to full screen\n      this.setPosition(0, 0);\n      this.setSize(window.innerWidth, window.innerHeight);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:maximized', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Unmaximize window\r\n     */\n  }, {\n    key: \"unmaximize\",\n    value: function unmaximize() {\n      if (!this.isMaximized) return;\n      this.isMaximized = false;\n\n      // Restore original position and size\n      this.setPosition(this.originalPosition.x, this.originalPosition.y);\n      this.setSize(this.originalSize.width, this.originalSize.height);\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:unmaximized', {\n        windowId: this.id,\n        appId: this.appId\n      });\n    }\n\n    /**\r\n     * Start window dragging\r\n     */\n  }, {\n    key: \"startDrag\",\n    value: function startDrag(e) {\n      if (this.isMaximized) return;\n      this.isDragging = true;\n      this.dragState = {\n        isDragging: true,\n        startX: e.clientX,\n        startY: e.clientY,\n        startPosX: this.position.x,\n        startPosY: this.position.y\n      };\n      this.element.style.cursor = 'move';\n      document.body.style.userSelect = 'none';\n    }\n\n    /**\r\n     * Handle window dragging\r\n     */\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(e) {\n      if (!this.isDragging) return;\n      var deltaX = e.clientX - this.dragState.startX;\n      var deltaY = e.clientY - this.dragState.startY;\n      var newX = this.dragState.startPosX + deltaX;\n      var newY = this.dragState.startPosY + deltaY;\n\n      // Constrain to screen bounds\n      var constrainedX = Math.max(0, Math.min(newX, window.innerWidth - this.size.width));\n      var constrainedY = Math.max(0, Math.min(newY, window.innerHeight - this.size.height));\n      this.setPosition(constrainedX, constrainedY);\n    }\n\n    /**\r\n     * Stop window dragging\r\n     */\n  }, {\n    key: \"stopDrag\",\n    value: function stopDrag() {\n      if (!this.isDragging) return;\n      this.isDragging = false;\n      this.dragState.isDragging = false;\n      this.element.style.cursor = '';\n      document.body.style.userSelect = '';\n    }\n\n    /**\r\n     * Start window resizing\r\n     */\n  }, {\n    key: \"startResize\",\n    value: function startResize(e, direction) {\n      if (this.isMaximized) return;\n      e.preventDefault();\n      e.stopPropagation();\n      this.isResizing = true;\n      this.resizeState = {\n        isResizing: true,\n        direction: direction,\n        startX: e.clientX,\n        startY: e.clientY,\n        startWidth: this.size.width,\n        startHeight: this.size.height,\n        startPosX: this.position.x,\n        startPosY: this.position.y\n      };\n      document.body.style.userSelect = 'none';\n    }\n\n    /**\r\n     * Handle window resizing\r\n     */\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(e) {\n      if (!this.isResizing) return;\n      var deltaX = e.clientX - this.resizeState.startX;\n      var deltaY = e.clientY - this.resizeState.startY;\n      var direction = this.resizeState.direction;\n      var newWidth = this.resizeState.startWidth;\n      var newHeight = this.resizeState.startHeight;\n      var newX = this.position.x;\n      var newY = this.position.y;\n\n      // Calculate new dimensions based on resize direction\n      if (direction.includes('e')) {\n        newWidth = Math.max(this.minSize.width, Math.min(this.maxSize.width, this.resizeState.startWidth + deltaX));\n      }\n      if (direction.includes('w')) {\n        newWidth = Math.max(this.minSize.width, Math.min(this.maxSize.width, this.resizeState.startWidth - deltaX));\n        newX = this.resizeState.startPosX + (this.resizeState.startWidth - newWidth);\n      }\n      if (direction.includes('s')) {\n        newHeight = Math.max(this.minSize.height, Math.min(this.maxSize.height, this.resizeState.startHeight + deltaY));\n      }\n      if (direction.includes('n')) {\n        newHeight = Math.max(this.minSize.height, Math.min(this.maxSize.height, this.resizeState.startHeight - deltaY));\n        newY = this.resizeState.startPosY + (this.resizeState.startHeight - newHeight);\n      }\n      this.setSize(newWidth, newHeight);\n      this.setPosition(newX, newY);\n    }\n\n    /**\r\n     * Stop window resizing\r\n     */\n  }, {\n    key: \"stopResize\",\n    value: function stopResize() {\n      if (!this.isResizing) return;\n      this.isResizing = false;\n      this.resizeState.isResizing = false;\n      document.body.style.userSelect = '';\n    }\n\n    /**\r\n     * Set window position\r\n     */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      this.position.x = x;\n      this.position.y = y;\n      this.element.style.left = \"\".concat(x, \"px\");\n      this.element.style.top = \"\".concat(y, \"px\");\n    }\n\n    /**\r\n     * Set window size\r\n     */\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.size.width = width;\n      this.size.height = height;\n      this.element.style.width = \"\".concat(width, \"px\");\n      this.element.style.height = \"\".concat(height, \"px\");\n    }\n\n    /**\r\n     * Update window title\r\n     */\n  }, {\n    key: \"setTitle\",\n    value: function setTitle(title) {\n      this.title = title;\n      var titleElement = this.element.querySelector('.window-title');\n      if (titleElement) {\n        titleElement.textContent = title;\n      }\n    }\n\n    /**\r\n     * Update window content\r\n     */\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      this.content = content;\n      if (typeof content === 'string') {\n        this.contentArea.innerHTML = content;\n      } else if (content instanceof HTMLElement) {\n        this.contentArea.innerHTML = '';\n        this.contentArea.appendChild(content);\n      }\n    }\n\n    /**\r\n     * Destroy window and clean up\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].emit('window:destroyed', {\n        windowId: this.id,\n        appId: this.appId\n      });\n      if (this.element && this.element.parentNode) {\n        this.element.parentNode.removeChild(this.element);\n      }\n\n      // Clean up references\n      this.element = null;\n      this.titleBar = null;\n      this.contentArea = null;\n      this.trafficLights = {};\n      this.resizeHandles = {};\n    }\n\n    /**\r\n     * Generate unique window ID\r\n     */\n  }, {\n    key: \"generateId\",\n    value: function generateId() {\n      return 'window_' + Math.random().toString(36).substr(2, 9);\n    }\n\n    /**\r\n     * Get next z-index for window stacking\r\n     */\n  }], [{\n    key: \"getNextZIndex\",\n    value: function getNextZIndex() {\n      Window.currentZIndex = (Window.currentZIndex || 1000) + 1;\n      return Window.currentZIndex;\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4078\n");

/***/ }),

/***/ 6451:
/*!********************************************************!*\
  !*** ./resources/js/components/LinkOS/WindowManager.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ 9394);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 4467);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 3029);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ 2901);\n/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../EventBus.js */ 2454);\n/* harmony import */ var _Window_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Window.js */ 4078);\n\n\n\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\n\n\n/**\r\n * WindowManager - Manages multiple windows and their interactions\r\n * Handles window stacking, focus management, and keyboard shortcuts\r\n */\nvar WindowManager = /*#__PURE__*/function () {\n  function WindowManager() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, WindowManager);\n    this.windows = new Map();\n    this.focusedWindow = null;\n    this.windowStack = [];\n\n    // Configuration\n    this.config = {\n      maxWindows: 20,\n      stackSpacing: 30,\n      defaultPosition: {\n        x: 100,\n        y: 100\n      },\n      keyboardShortcuts: true\n    };\n    this.init();\n  }\n\n  /**\r\n   * Initialize window manager\r\n   */\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(WindowManager, [{\n    key: \"init\",\n    value: function init() {\n      this.setupEventListeners();\n      this.setupKeyboardShortcuts();\n      console.log('WindowManager initialized');\n    }\n\n    /**\r\n     * Setup event listeners\r\n     */\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Window events\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].on('window:created', function (data) {\n        return _this.handleWindowCreated(data);\n      });\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].on('window:destroyed', function (data) {\n        return _this.handleWindowDestroyed(data);\n      });\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].on('window:focused', function (data) {\n        return _this.handleWindowFocused(data);\n      });\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].on('window:minimized', function (data) {\n        return _this.handleWindowMinimized(data);\n      });\n\n      // App close events\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].on('app:close', function (data) {\n        return _this.handleAppClose(data);\n      });\n\n      // Global click to blur windows\n      document.addEventListener('mousedown', function (e) {\n        if (!e.target.closest('.LinkOS-window')) {\n          _this.blurAllWindows();\n        }\n      });\n\n      // Window resize handling\n      window.addEventListener('resize', function () {\n        _this.handleScreenResize();\n      });\n    }\n\n    /**\r\n     * Setup keyboard shortcuts\r\n     */\n  }, {\n    key: \"setupKeyboardShortcuts\",\n    value: function setupKeyboardShortcuts() {\n      var _this2 = this;\n      if (!this.config.keyboardShortcuts) return;\n      document.addEventListener('keydown', function (e) {\n        // Command+Tab - Cycle through windows\n        if (e.metaKey && e.key === 'Tab') {\n          e.preventDefault();\n          _this2.cycleWindows();\n        }\n\n        // Command+` - Cycle through app windows\n        if (e.metaKey && e.key === '`') {\n          e.preventDefault();\n          _this2.cycleAppWindows();\n        }\n\n        // Command+Shift+W - Close all windows\n        if (e.metaKey && e.shiftKey && e.key === 'W') {\n          e.preventDefault();\n          _this2.closeAllWindows();\n        }\n\n        // Command+Option+H - Hide all windows\n        if (e.metaKey && e.altKey && e.key === 'h') {\n          e.preventDefault();\n          _this2.hideAllWindows();\n        }\n      });\n    }\n\n    /**\r\n     * Create and show a new window\r\n     */\n  }, {\n    key: \"createWindow\",\n    value: function createWindow(config) {\n      // Check window limit\n      if (this.windows.size >= this.config.maxWindows) {\n        console.warn('Maximum window limit reached');\n        return null;\n      }\n\n      // Calculate stacked position for new windows\n      var position = this.calculateNewWindowPosition(config.appId);\n      var windowConfig = _objectSpread({\n        position: position\n      }, config);\n      var window = new _Window_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](windowConfig);\n      this.registerWindow(window);\n      return window;\n    }\n\n    /**\r\n     * Register window with manager\r\n     */\n  }, {\n    key: \"registerWindow\",\n    value: function registerWindow(window) {\n      this.windows.set(window.id, window);\n      this.windowStack.push(window.id);\n      console.log(\"Window registered: \".concat(window.title, \" (\").concat(window.id, \")\"));\n    }\n\n    /**\r\n     * Get window by ID\r\n     */\n  }, {\n    key: \"getWindow\",\n    value: function getWindow(windowId) {\n      return this.windows.get(windowId);\n    }\n\n    /**\r\n     * Get windows by app ID\r\n     */\n  }, {\n    key: \"getWindowsByApp\",\n    value: function getWindowsByApp(appId) {\n      return Array.from(this.windows.values()).filter(function (window) {\n        return window.appId === appId;\n      });\n    }\n\n    /**\r\n     * Get all visible windows\r\n     */\n  }, {\n    key: \"getVisibleWindows\",\n    value: function getVisibleWindows() {\n      return Array.from(this.windows.values()).filter(function (window) {\n        return window.isVisible;\n      });\n    }\n\n    /**\r\n     * Focus a specific window\r\n     */\n  }, {\n    key: \"focusWindow\",\n    value: function focusWindow(windowId) {\n      var window = this.getWindow(windowId);\n      if (!window) return;\n\n      // Blur current focused window\n      if (this.focusedWindow && this.focusedWindow !== window) {\n        this.focusedWindow.blur();\n      }\n\n      // Focus new window\n      window.focus();\n      this.focusedWindow = window;\n\n      // Update window stack order\n      this.moveToTop(windowId);\n    }\n\n    /**\r\n     * Blur all windows\r\n     */\n  }, {\n    key: \"blurAllWindows\",\n    value: function blurAllWindows() {\n      this.windows.forEach(function (window) {\n        window.blur();\n      });\n      this.focusedWindow = null;\n    }\n\n    /**\r\n     * Move window to top of stack\r\n     */\n  }, {\n    key: \"moveToTop\",\n    value: function moveToTop(windowId) {\n      var index = this.windowStack.indexOf(windowId);\n      if (index > -1) {\n        this.windowStack.splice(index, 1);\n        this.windowStack.push(windowId);\n      }\n    }\n\n    /**\r\n     * Cycle through windows with Command+Tab\r\n     */\n  }, {\n    key: \"cycleWindows\",\n    value: function cycleWindows() {\n      var _this3 = this;\n      var visibleWindows = this.getVisibleWindows();\n      if (visibleWindows.length === 0) return;\n      var nextIndex = 0;\n      if (this.focusedWindow) {\n        var currentIndex = visibleWindows.findIndex(function (w) {\n          return w.id === _this3.focusedWindow.id;\n        });\n        nextIndex = (currentIndex + 1) % visibleWindows.length;\n      }\n      this.focusWindow(visibleWindows[nextIndex].id);\n    }\n\n    /**\r\n     * Cycle through windows of the same app\r\n     */\n  }, {\n    key: \"cycleAppWindows\",\n    value: function cycleAppWindows() {\n      var _this4 = this;\n      if (!this.focusedWindow) return;\n      var appWindows = this.getWindowsByApp(this.focusedWindow.appId).filter(function (w) {\n        return w.isVisible;\n      });\n      if (appWindows.length <= 1) return;\n      var currentIndex = appWindows.findIndex(function (w) {\n        return w.id === _this4.focusedWindow.id;\n      });\n      var nextIndex = (currentIndex + 1) % appWindows.length;\n      this.focusWindow(appWindows[nextIndex].id);\n    }\n\n    /**\r\n     * Close all windows\r\n     */\n  }, {\n    key: \"closeAllWindows\",\n    value: function closeAllWindows() {\n      var _this5 = this;\n      var windowIds = Array.from(this.windows.keys());\n      windowIds.forEach(function (id) {\n        var window = _this5.getWindow(id);\n        if (window) {\n          window.close();\n        }\n      });\n    }\n\n    /**\r\n     * Hide all windows\r\n     */\n  }, {\n    key: \"hideAllWindows\",\n    value: function hideAllWindows() {\n      this.windows.forEach(function (window) {\n        if (window.isVisible) {\n          window.hide();\n        }\n      });\n      this.focusedWindow = null;\n    }\n\n    /**\r\n     * Show all windows\r\n     */\n  }, {\n    key: \"showAllWindows\",\n    value: function showAllWindows() {\n      this.windows.forEach(function (window) {\n        if (!window.isVisible && !window.isMinimized) {\n          window.show();\n        }\n      });\n    }\n\n    /**\r\n     * Calculate position for new window\r\n     */\n  }, {\n    key: \"calculateNewWindowPosition\",\n    value: function calculateNewWindowPosition(appId) {\n      var existingWindows = this.getWindowsByApp(appId);\n      var basePosition = _objectSpread({}, this.config.defaultPosition);\n      if (existingWindows.length === 0) {\n        return basePosition;\n      }\n\n      // Stack windows with offset\n      var offset = existingWindows.length * this.config.stackSpacing;\n      return {\n        x: basePosition.x + offset,\n        y: basePosition.y + offset\n      };\n    }\n\n    /**\r\n     * Handle screen resize\r\n     */\n  }, {\n    key: \"handleScreenResize\",\n    value: function handleScreenResize() {\n      this.windows.forEach(function (window) {\n        // Ensure windows stay within screen bounds\n        var maxX = window.innerWidth - window.size.width;\n        var maxY = window.innerHeight - window.size.height;\n        if (window.position.x > maxX) {\n          window.setPosition(Math.max(0, maxX), window.position.y);\n        }\n        if (window.position.y > maxY) {\n          window.setPosition(window.position.x, Math.max(0, maxY));\n        }\n\n        // Update maximized windows\n        if (window.isMaximized) {\n          window.setSize(window.innerWidth, window.innerHeight);\n        }\n      });\n    }\n\n    /**\r\n     * Handle window created event\r\n     */\n  }, {\n    key: \"handleWindowCreated\",\n    value: function handleWindowCreated(data) {\n      console.log(\"Window created: \".concat(data.windowId, \" for app: \").concat(data.appId));\n    }\n\n    /**\r\n     * Handle window destroyed event\r\n     */\n  }, {\n    key: \"handleWindowDestroyed\",\n    value: function handleWindowDestroyed(data) {\n      var window = this.windows.get(data.windowId);\n      if (!window) return;\n\n      // Remove from collections\n      this.windows[\"delete\"](data.windowId);\n      var stackIndex = this.windowStack.indexOf(data.windowId);\n      if (stackIndex > -1) {\n        this.windowStack.splice(stackIndex, 1);\n      }\n\n      // Update focused window\n      if (this.focusedWindow === window) {\n        this.focusedWindow = null;\n\n        // Focus next window in stack\n        if (this.windowStack.length > 0) {\n          var nextWindowId = this.windowStack[this.windowStack.length - 1];\n          var nextWindow = this.getWindow(nextWindowId);\n          if (nextWindow && nextWindow.isVisible) {\n            this.focusWindow(nextWindowId);\n          }\n        }\n      }\n      console.log(\"Window destroyed: \".concat(data.windowId));\n    }\n\n    /**\r\n     * Handle window focused event\r\n     */\n  }, {\n    key: \"handleWindowFocused\",\n    value: function handleWindowFocused(data) {\n      var window = this.getWindow(data.windowId);\n      if (window) {\n        this.focusedWindow = window;\n        this.moveToTop(data.windowId);\n      }\n    }\n\n    /**\r\n     * Handle window minimized event\r\n     */\n  }, {\n    key: \"handleWindowMinimized\",\n    value: function handleWindowMinimized(data) {\n      var window = this.getWindow(data.windowId);\n      if (window && this.focusedWindow === window) {\n        this.focusedWindow = null;\n\n        // Focus next visible window\n        var visibleWindows = this.getVisibleWindows();\n        if (visibleWindows.length > 0) {\n          this.focusWindow(visibleWindows[visibleWindows.length - 1].id);\n        }\n      }\n    }\n\n    /**\r\n     * Handle app close event\r\n     */\n  }, {\n    key: \"handleAppClose\",\n    value: function handleAppClose(data) {\n      var appId = data.appId;\n      var appWindows = this.getWindowsByApp(appId);\n      appWindows.forEach(function (window) {\n        window.close();\n      });\n    }\n\n    /**\r\n     * Create app content container\r\n     */\n  }, {\n    key: \"createAppContent\",\n    value: function createAppContent(component) {\n      var container = document.createElement('div');\n      container.className = 'app-content';\n      container.style.cssText = \"\\n            width: 100%;\\n            height: 100%;\\n            overflow: hidden;\\n        \";\n      if (typeof component === 'string') {\n        container.innerHTML = component;\n      } else if (component instanceof HTMLElement) {\n        container.appendChild(component);\n      } else if (typeof component === 'function') {\n        // Component constructor\n        var instance = new component(container);\n        if (instance.element) {\n          container.appendChild(instance.element);\n        }\n      }\n      return container;\n    }\n\n    /**\r\n     * Get window manager statistics\r\n     */\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      var _this$focusedWindow;\n      return {\n        totalWindows: this.windows.size,\n        visibleWindows: this.getVisibleWindows().length,\n        focusedWindow: ((_this$focusedWindow = this.focusedWindow) === null || _this$focusedWindow === void 0 ? void 0 : _this$focusedWindow.id) || null,\n        windowStack: (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.windowStack)\n      };\n    }\n\n    /**\r\n     * Destroy window manager and clean up\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.closeAllWindows();\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('window:created');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('window:destroyed');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('window:focused');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('window:minimized');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('app:launch');\n      _EventBus_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].off('app:close');\n      this.windows.clear();\n      this.windowStack = [];\n      this.focusedWindow = null;\n      console.log('WindowManager destroyed');\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WindowManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6451\n");

/***/ })

}]);